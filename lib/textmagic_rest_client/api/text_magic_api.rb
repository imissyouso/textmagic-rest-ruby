=begin
#TextMagic API Documentation

## Overview ## Introduction         test <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 

OpenAPI spec version: 2
Contact: support@textmagi.biz
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'uri'

module TextMagic
  class TextMagicApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign contacts to the specified list.
    # @param assign_contacts_to_list_input_object Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [ResourceLinkResponse]
    def assign_contacts_to_list(assign_contacts_to_list_input_object, id, opts = {})
      data, _status_code, _headers = assign_contacts_to_list_with_http_info(assign_contacts_to_list_input_object, id, opts)
      data
    end

    # Assign contacts to the specified list.
    # @param assign_contacts_to_list_input_object Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def assign_contacts_to_list_with_http_info(assign_contacts_to_list_input_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.assign_contacts_to_list ...'
      end
      # verify the required parameter 'assign_contacts_to_list_input_object' is set
      if @api_client.config.client_side_validation && assign_contacts_to_list_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'assign_contacts_to_list_input_object' when calling TextMagicApi.assign_contacts_to_list"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.assign_contacts_to_list"
      end
      # resource path
      local_var_path = '/api/v2/lists/{id}/contacts'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(assign_contacts_to_list_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#assign_contacts_to_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Block contact from inbound and outbound communication by phone number.
    # @param block_contact_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def block_contact(block_contact_input_object, opts = {})
      data, _status_code, _headers = block_contact_with_http_info(block_contact_input_object, opts)
      data
    end

    # Block contact from inbound and outbound communication by phone number.
    # @param block_contact_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def block_contact_with_http_info(block_contact_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.block_contact ...'
      end
      # verify the required parameter 'block_contact_input_object' is set
      if @api_client.config.client_side_validation && block_contact_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'block_contact_input_object' when calling TextMagicApi.block_contact"
      end
      # resource path
      local_var_path = '/api/v2/contacts/block'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(block_contact_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#block_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Buy a dedicated number and assign it to the specified account.
    # @param buy_dedicated_number_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def buy_dedicated_number(buy_dedicated_number_input_object, opts = {})
      buy_dedicated_number_with_http_info(buy_dedicated_number_input_object, opts)
      nil
    end

    # Buy a dedicated number and assign it to the specified account.
    # @param buy_dedicated_number_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def buy_dedicated_number_with_http_info(buy_dedicated_number_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.buy_dedicated_number ...'
      end
      # verify the required parameter 'buy_dedicated_number_input_object' is set
      if @api_client.config.client_side_validation && buy_dedicated_number_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'buy_dedicated_number_input_object' when calling TextMagicApi.buy_dedicated_number"
      end
      # resource path
      local_var_path = '/api/v2/numbers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(buy_dedicated_number_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#buy_dedicated_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a survey.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [ResourceLinkResponse]
    def cancel_survey(id, opts = {})
      data, _status_code, _headers = cancel_survey_with_http_info(id, opts)
      data
    end

    # Cancel a survey.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def cancel_survey_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.cancel_survey ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.cancel_survey"
      end
      # resource path
      local_var_path = '/api/v2/surveys/{id}/cancel'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#cancel_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check user phone verification code
    # @param check_phone_verification_code_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def check_phone_verification_code(check_phone_verification_code_input_object, opts = {})
      check_phone_verification_code_with_http_info(check_phone_verification_code_input_object, opts)
      nil
    end

    # Check user phone verification code
    # @param check_phone_verification_code_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def check_phone_verification_code_with_http_info(check_phone_verification_code_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.check_phone_verification_code ...'
      end
      # verify the required parameter 'check_phone_verification_code_input_object' is set
      if @api_client.config.client_side_validation && check_phone_verification_code_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'check_phone_verification_code_input_object' when calling TextMagicApi.check_phone_verification_code"
      end
      # resource path
      local_var_path = '/api/v2/user/phone/verification'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(check_phone_verification_code_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#check_phone_verification_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset list members to the specified contacts.
    # @param clear_and_assign_contacts_to_list_input_object Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [ResourceLinkResponse]
    def clear_and_assign_contacts_to_list(clear_and_assign_contacts_to_list_input_object, id, opts = {})
      data, _status_code, _headers = clear_and_assign_contacts_to_list_with_http_info(clear_and_assign_contacts_to_list_input_object, id, opts)
      data
    end

    # Reset list members to the specified contacts.
    # @param clear_and_assign_contacts_to_list_input_object Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def clear_and_assign_contacts_to_list_with_http_info(clear_and_assign_contacts_to_list_input_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.clear_and_assign_contacts_to_list ...'
      end
      # verify the required parameter 'clear_and_assign_contacts_to_list_input_object' is set
      if @api_client.config.client_side_validation && clear_and_assign_contacts_to_list_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'clear_and_assign_contacts_to_list_input_object' when calling TextMagicApi.clear_and_assign_contacts_to_list"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.clear_and_assign_contacts_to_list"
      end
      # resource path
      local_var_path = '/api/v2/lists/{id}/contacts'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(clear_and_assign_contacts_to_list_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#clear_and_assign_contacts_to_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Close chats by chat ids or close all chats
    # @param close_chats_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def close_chats_bulk(close_chats_bulk_input_object, opts = {})
      close_chats_bulk_with_http_info(close_chats_bulk_input_object, opts)
      nil
    end

    # Close chats by chat ids or close all chats
    # @param close_chats_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def close_chats_bulk_with_http_info(close_chats_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.close_chats_bulk ...'
      end
      # verify the required parameter 'close_chats_bulk_input_object' is set
      if @api_client.config.client_side_validation && close_chats_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'close_chats_bulk_input_object' when calling TextMagicApi.close_chats_bulk"
      end
      # resource path
      local_var_path = '/api/v2/chats/close/bulk'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(close_chats_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#close_chats_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Close all chats that have no unread messages.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def close_read_chats(opts = {})
      close_read_chats_with_http_info(opts)
      nil
    end

    # Close all chats that have no unread messages.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def close_read_chats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.close_read_chats ...'
      end
      # resource path
      local_var_path = '/api/v2/chats/close/read'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#close_read_chats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Close subaccount.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def close_subaccount(id, opts = {})
      close_subaccount_with_http_info(id, opts)
      nil
    end

    # Close subaccount.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def close_subaccount_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.close_subaccount ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.close_subaccount"
      end
      # resource path
      local_var_path = '/api/v2/subaccounts/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#close_subaccount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new contact from the submitted data.
    # @param create_contact_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def create_contact(create_contact_input_object, opts = {})
      data, _status_code, _headers = create_contact_with_http_info(create_contact_input_object, opts)
      data
    end

    # Create a new contact from the submitted data.
    # @param create_contact_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def create_contact_with_http_info(create_contact_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.create_contact ...'
      end
      # verify the required parameter 'create_contact_input_object' is set
      if @api_client.config.client_side_validation && create_contact_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'create_contact_input_object' when calling TextMagicApi.create_contact"
      end
      # resource path
      local_var_path = '/api/v2/contacts'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_contact_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#create_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new contact note.
    # @param create_contact_note_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def create_contact_note(create_contact_note_input_object, id, opts = {})
      data, _status_code, _headers = create_contact_note_with_http_info(create_contact_note_input_object, id, opts)
      data
    end

    # Create a new contact note.
    # @param create_contact_note_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def create_contact_note_with_http_info(create_contact_note_input_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.create_contact_note ...'
      end
      # verify the required parameter 'create_contact_note_input_object' is set
      if @api_client.config.client_side_validation && create_contact_note_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'create_contact_note_input_object' when calling TextMagicApi.create_contact_note"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.create_contact_note"
      end
      # resource path
      local_var_path = '/api/v2/contacts/{id}/notes'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_contact_note_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#create_contact_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new custom field from the submitted data.
    # @param create_custom_field_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def create_custom_field(create_custom_field_input_object, opts = {})
      data, _status_code, _headers = create_custom_field_with_http_info(create_custom_field_input_object, opts)
      data
    end

    # Create a new custom field from the submitted data.
    # @param create_custom_field_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def create_custom_field_with_http_info(create_custom_field_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.create_custom_field ...'
      end
      # verify the required parameter 'create_custom_field_input_object' is set
      if @api_client.config.client_side_validation && create_custom_field_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'create_custom_field_input_object' when calling TextMagicApi.create_custom_field"
      end
      # resource path
      local_var_path = '/api/v2/customfields'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_custom_field_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#create_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new list from the submitted data.
    # @param create_list_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def create_list(create_list_input_object, opts = {})
      data, _status_code, _headers = create_list_with_http_info(create_list_input_object, opts)
      data
    end

    # Create a new list from the submitted data.
    # @param create_list_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def create_list_with_http_info(create_list_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.create_list ...'
      end
      # verify the required parameter 'create_list_input_object' is set
      if @api_client.config.client_side_validation && create_list_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'create_list_input_object' when calling TextMagicApi.create_list"
      end
      # resource path
      local_var_path = '/api/v2/lists'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_list_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#create_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add or update a device token.
    # @param create_push_token_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def create_push_token(create_push_token_input_object, opts = {})
      create_push_token_with_http_info(create_push_token_input_object, opts)
      nil
    end

    # Add or update a device token.
    # @param create_push_token_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_push_token_with_http_info(create_push_token_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.create_push_token ...'
      end
      # verify the required parameter 'create_push_token_input_object' is set
      if @api_client.config.client_side_validation && create_push_token_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'create_push_token_input_object' when calling TextMagicApi.create_push_token"
      end
      # resource path
      local_var_path = '/api/v2/push/tokens'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_push_token_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#create_push_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new survey from the submitted data.
    # @param create_survey_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def create_survey(create_survey_input_object, opts = {})
      data, _status_code, _headers = create_survey_with_http_info(create_survey_input_object, opts)
      data
    end

    # Create a new survey from the submitted data.
    # @param create_survey_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def create_survey_with_http_info(create_survey_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.create_survey ...'
      end
      # verify the required parameter 'create_survey_input_object' is set
      if @api_client.config.client_side_validation && create_survey_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'create_survey_input_object' when calling TextMagicApi.create_survey"
      end
      # resource path
      local_var_path = '/api/v2/surveys'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_survey_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#create_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new node from the submitted data.
    # @param create_survey_node_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def create_survey_node(create_survey_node_input_object, id, opts = {})
      data, _status_code, _headers = create_survey_node_with_http_info(create_survey_node_input_object, id, opts)
      data
    end

    # Create a new node from the submitted data.
    # @param create_survey_node_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def create_survey_node_with_http_info(create_survey_node_input_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.create_survey_node ...'
      end
      # verify the required parameter 'create_survey_node_input_object' is set
      if @api_client.config.client_side_validation && create_survey_node_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'create_survey_node_input_object' when calling TextMagicApi.create_survey_node"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.create_survey_node"
      end
      # resource path
      local_var_path = '/api/v2/surveys/{id}/nodes'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_survey_node_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#create_survey_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new template from the submitted data.
    # @param create_template_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def create_template(create_template_input_object, opts = {})
      data, _status_code, _headers = create_template_with_http_info(create_template_input_object, opts)
      data
    end

    # Create a new template from the submitted data.
    # @param create_template_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def create_template_with_http_info(create_template_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.create_template ...'
      end
      # verify the required parameter 'create_template_input_object' is set
      if @api_client.config.client_side_validation && create_template_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'create_template_input_object' when calling TextMagicApi.create_template"
      end
      # resource path
      local_var_path = '/api/v2/templates'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_template_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#create_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete all contacts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_all_contacts(opts = {})
      delete_all_contacts_with_http_info(opts)
      nil
    end

    # Delete all contacts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_all_contacts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_all_contacts ...'
      end
      # resource path
      local_var_path = '/api/v2/contact/all'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_all_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete all messages
    # Delete all messages.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_all_outbound_messages(opts = {})
      delete_all_outbound_messages_with_http_info(opts)
      nil
    end

    # Delete all messages
    # Delete all messages.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_all_outbound_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_all_outbound_messages ...'
      end
      # resource path
      local_var_path = '/api/v2/message/all'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_all_outbound_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an avatar for the current user.\\
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_avatar(opts = {})
      delete_avatar_with_http_info(opts)
      nil
    end

    # Delete an avatar for the current user.\\
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_avatar_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_avatar ...'
      end
      # resource path
      local_var_path = '/api/v2/user/avatar'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_avatar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete messages from chat by given messages ID(s).
    # @param delete_chat_messages_bulk_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def delete_chat_messages(delete_chat_messages_bulk_input_object, id, opts = {})
      delete_chat_messages_with_http_info(delete_chat_messages_bulk_input_object, id, opts)
      nil
    end

    # Delete messages from chat by given messages ID(s).
    # @param delete_chat_messages_bulk_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_chat_messages_with_http_info(delete_chat_messages_bulk_input_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_chat_messages ...'
      end
      # verify the required parameter 'delete_chat_messages_bulk_input_object' is set
      if @api_client.config.client_side_validation && delete_chat_messages_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'delete_chat_messages_bulk_input_object' when calling TextMagicApi.delete_chat_messages"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_chat_messages"
      end
      # resource path
      local_var_path = '/api/v2/chats/{id}/messages/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_chat_messages_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_chat_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete chats by given ID(s) or delete all chats.
    # @param delete_chats_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def delete_chats_bulk(delete_chats_bulk_input_object, opts = {})
      delete_chats_bulk_with_http_info(delete_chats_bulk_input_object, opts)
      nil
    end

    # Delete chats by given ID(s) or delete all chats.
    # @param delete_chats_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_chats_bulk_with_http_info(delete_chats_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_chats_bulk ...'
      end
      # verify the required parameter 'delete_chats_bulk_input_object' is set
      if @api_client.config.client_side_validation && delete_chats_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'delete_chats_bulk_input_object' when calling TextMagicApi.delete_chats_bulk"
      end
      # resource path
      local_var_path = '/api/v2/chats/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_chats_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_chats_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a single contact.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_contact(id, opts = {})
      delete_contact_with_http_info(id, opts)
      nil
    end

    # Delete a single contact.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_contact_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_contact ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_contact"
      end
      # resource path
      local_var_path = '/api/v2/contacts/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an avatar for the contact.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_contact_avatar(id, opts = {})
      delete_contact_avatar_with_http_info(id, opts)
      nil
    end

    # Delete an avatar for the contact.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_contact_avatar_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_contact_avatar ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_contact_avatar"
      end
      # resource path
      local_var_path = '/api/v2/contacts/{id}/avatar'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_contact_avatar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a single contact note.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_contact_note(id, opts = {})
      delete_contact_note_with_http_info(id, opts)
      nil
    end

    # Delete a single contact note.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_contact_note_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_contact_note ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_contact_note"
      end
      # resource path
      local_var_path = '/api/v2/notes/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_contact_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete contact note by given ID(s) or delete all contact notes.
    # @param id 
    # @param delete_contact_notes_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def delete_contact_notes_bulk(id, delete_contact_notes_bulk_input_object, opts = {})
      delete_contact_notes_bulk_with_http_info(id, delete_contact_notes_bulk_input_object, opts)
      nil
    end

    # Delete contact note by given ID(s) or delete all contact notes.
    # @param id 
    # @param delete_contact_notes_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_contact_notes_bulk_with_http_info(id, delete_contact_notes_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_contact_notes_bulk ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_contact_notes_bulk"
      end
      # verify the required parameter 'delete_contact_notes_bulk_input_object' is set
      if @api_client.config.client_side_validation && delete_contact_notes_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'delete_contact_notes_bulk_input_object' when calling TextMagicApi.delete_contact_notes_bulk"
      end
      # resource path
      local_var_path = '/api/v2/contacts/{id}/notes/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_contact_notes_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_contact_notes_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete contact by given ID(s) or delete all contacts.
    # @param delete_contacts_by_ids_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def delete_contacts_by_ids(delete_contacts_by_ids_input_object, opts = {})
      delete_contacts_by_ids_with_http_info(delete_contacts_by_ids_input_object, opts)
      nil
    end

    # Delete contact by given ID(s) or delete all contacts.
    # @param delete_contacts_by_ids_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_contacts_by_ids_with_http_info(delete_contacts_by_ids_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_contacts_by_ids ...'
      end
      # verify the required parameter 'delete_contacts_by_ids_input_object' is set
      if @api_client.config.client_side_validation && delete_contacts_by_ids_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'delete_contacts_by_ids_input_object' when calling TextMagicApi.delete_contacts_by_ids"
      end
      # resource path
      local_var_path = '/api/v2/contacts/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_contacts_by_ids_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_contacts_by_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unassign contacts from the specified list.
    # @param delete_contacs_from_list_object Contact ID(s), separated by comma
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_contacts_from_list(delete_contacs_from_list_object, id, opts = {})
      delete_contacts_from_list_with_http_info(delete_contacs_from_list_object, id, opts)
      nil
    end

    # Unassign contacts from the specified list.
    # @param delete_contacs_from_list_object Contact ID(s), separated by comma
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_contacts_from_list_with_http_info(delete_contacs_from_list_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_contacts_from_list ...'
      end
      # verify the required parameter 'delete_contacs_from_list_object' is set
      if @api_client.config.client_side_validation && delete_contacs_from_list_object.nil?
        fail ArgumentError, "Missing the required parameter 'delete_contacs_from_list_object' when calling TextMagicApi.delete_contacts_from_list"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_contacts_from_list"
      end
      # resource path
      local_var_path = '/api/v2/lists/{id}/contacts'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_contacs_from_list_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_contacts_from_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a single custom field.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_custom_field(id, opts = {})
      delete_custom_field_with_http_info(id, opts)
      nil
    end

    # Delete a single custom field.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_custom_field_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_custom_field ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_custom_field"
      end
      # resource path
      local_var_path = '/api/v2/customfields/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel dedicated number subscription.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dedicated_number(id, opts = {})
      delete_dedicated_number_with_http_info(id, opts)
      nil
    end

    # Cancel dedicated number subscription.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dedicated_number_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_dedicated_number ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_dedicated_number"
      end
      # resource path
      local_var_path = '/api/v2/numbers/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_dedicated_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the incoming message.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_inbound_message(id, opts = {})
      delete_inbound_message_with_http_info(id, opts)
      nil
    end

    # Delete the incoming message.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_inbound_message_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_inbound_message ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_inbound_message"
      end
      # resource path
      local_var_path = '/api/v2/replies/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_inbound_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete inbound messages by given ID(s) or delete all inbound messages.
    # @param delete_inbound_messages_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def delete_inbound_messages_bulk(delete_inbound_messages_bulk_input_object, opts = {})
      delete_inbound_messages_bulk_with_http_info(delete_inbound_messages_bulk_input_object, opts)
      nil
    end

    # Delete inbound messages by given ID(s) or delete all inbound messages.
    # @param delete_inbound_messages_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_inbound_messages_bulk_with_http_info(delete_inbound_messages_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_inbound_messages_bulk ...'
      end
      # verify the required parameter 'delete_inbound_messages_bulk_input_object' is set
      if @api_client.config.client_side_validation && delete_inbound_messages_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'delete_inbound_messages_bulk_input_object' when calling TextMagicApi.delete_inbound_messages_bulk"
      end
      # resource path
      local_var_path = '/api/v2/replies/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_inbound_messages_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_inbound_messages_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a single list.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_list(id, opts = {})
      delete_list_with_http_info(id, opts)
      nil
    end

    # Delete a single list.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_list_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_list ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_list"
      end
      # resource path
      local_var_path = '/api/v2/lists/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an avatar for the list.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_list_avatar(id, opts = {})
      delete_list_avatar_with_http_info(id, opts)
      nil
    end

    # Delete an avatar for the list.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_list_avatar_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_list_avatar ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_list_avatar"
      end
      # resource path
      local_var_path = '/api/v2/lists/{id}/avatar'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_list_avatar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete contact from list by given ID(s) or all contacts from list.
    # @param delete_list_contacts_bulk_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def delete_list_contacts_bulk(delete_list_contacts_bulk_input_object, id, opts = {})
      delete_list_contacts_bulk_with_http_info(delete_list_contacts_bulk_input_object, id, opts)
      nil
    end

    # Delete contact from list by given ID(s) or all contacts from list.
    # @param delete_list_contacts_bulk_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_list_contacts_bulk_with_http_info(delete_list_contacts_bulk_input_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_list_contacts_bulk ...'
      end
      # verify the required parameter 'delete_list_contacts_bulk_input_object' is set
      if @api_client.config.client_side_validation && delete_list_contacts_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'delete_list_contacts_bulk_input_object' when calling TextMagicApi.delete_list_contacts_bulk"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_list_contacts_bulk"
      end
      # resource path
      local_var_path = '/api/v2/lists/{id}/contacts/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_list_contacts_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_list_contacts_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete list by given ID(s) or delete all lists.
    # @param delete_lists_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def delete_lists_bulk(delete_lists_bulk_input_object, opts = {})
      delete_lists_bulk_with_http_info(delete_lists_bulk_input_object, opts)
      nil
    end

    # Delete list by given ID(s) or delete all lists.
    # @param delete_lists_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lists_bulk_with_http_info(delete_lists_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_lists_bulk ...'
      end
      # verify the required parameter 'delete_lists_bulk_input_object' is set
      if @api_client.config.client_side_validation && delete_lists_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'delete_lists_bulk_input_object' when calling TextMagicApi.delete_lists_bulk"
      end
      # resource path
      local_var_path = '/api/v2/lists/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_lists_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_lists_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a message session, together with all nested messages.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_message_session(id, opts = {})
      delete_message_session_with_http_info(id, opts)
      nil
    end

    # Delete a message session, together with all nested messages.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_message_session_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_message_session ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_message_session"
      end
      # resource path
      local_var_path = '/api/v2/sessions/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_message_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
    # @param delete_message_sessions_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def delete_message_sessions_bulk(delete_message_sessions_bulk_input_object, opts = {})
      delete_message_sessions_bulk_with_http_info(delete_message_sessions_bulk_input_object, opts)
      nil
    end

    # Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
    # @param delete_message_sessions_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_message_sessions_bulk_with_http_info(delete_message_sessions_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_message_sessions_bulk ...'
      end
      # verify the required parameter 'delete_message_sessions_bulk_input_object' is set
      if @api_client.config.client_side_validation && delete_message_sessions_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'delete_message_sessions_bulk_input_object' when calling TextMagicApi.delete_message_sessions_bulk"
      end
      # resource path
      local_var_path = '/api/v2/sessions/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_message_sessions_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_message_sessions_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete message
    # Delete a single message.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_outbound_message(id, opts = {})
      delete_outbound_message_with_http_info(id, opts)
      nil
    end

    # Delete message
    # Delete a single message.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_outbound_message_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_outbound_message ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_outbound_message"
      end
      # resource path
      local_var_path = '/api/v2/messages/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_outbound_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete messages by IDs
    # Delete outbound messages by given ID(s) or delete all outbound messages.
    # @param delete_outbound_messages_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def delete_outbound_messages_bulk(delete_outbound_messages_bulk_input_object, opts = {})
      delete_outbound_messages_bulk_with_http_info(delete_outbound_messages_bulk_input_object, opts)
      nil
    end

    # Delete messages by IDs
    # Delete outbound messages by given ID(s) or delete all outbound messages.
    # @param delete_outbound_messages_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_outbound_messages_bulk_with_http_info(delete_outbound_messages_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_outbound_messages_bulk ...'
      end
      # verify the required parameter 'delete_outbound_messages_bulk_input_object' is set
      if @api_client.config.client_side_validation && delete_outbound_messages_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'delete_outbound_messages_bulk_input_object' when calling TextMagicApi.delete_outbound_messages_bulk"
      end
      # resource path
      local_var_path = '/api/v2/messages/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_outbound_messages_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_outbound_messages_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a push notification device token.
    # @param type 
    # @param device_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_push_token(type, device_id, opts = {})
      delete_push_token_with_http_info(type, device_id, opts)
      nil
    end

    # Delete a push notification device token.
    # @param type 
    # @param device_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_push_token_with_http_info(type, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_push_token ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling TextMagicApi.delete_push_token"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling TextMagicApi.delete_push_token"
      end
      # resource path
      local_var_path = '/api/v2/push/tokens/{type}/{deviceId}'.sub('{' + 'type' + '}', type.to_s).sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_push_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a message session, together with all nested messages.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_scheduled_message(id, opts = {})
      delete_scheduled_message_with_http_info(id, opts)
      nil
    end

    # Delete a message session, together with all nested messages.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_scheduled_message_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_scheduled_message ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_scheduled_message"
      end
      # resource path
      local_var_path = '/api/v2/schedules/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_scheduled_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete scheduled messages by given ID(s) or delete all scheduled messages.
    # @param delete_scheduled_messages_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def delete_scheduled_messages_bulk(delete_scheduled_messages_bulk_input_object, opts = {})
      delete_scheduled_messages_bulk_with_http_info(delete_scheduled_messages_bulk_input_object, opts)
      nil
    end

    # Delete scheduled messages by given ID(s) or delete all scheduled messages.
    # @param delete_scheduled_messages_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_scheduled_messages_bulk_with_http_info(delete_scheduled_messages_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_scheduled_messages_bulk ...'
      end
      # verify the required parameter 'delete_scheduled_messages_bulk_input_object' is set
      if @api_client.config.client_side_validation && delete_scheduled_messages_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'delete_scheduled_messages_bulk_input_object' when calling TextMagicApi.delete_scheduled_messages_bulk"
      end
      # resource path
      local_var_path = '/api/v2/schedules/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_scheduled_messages_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_scheduled_messages_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Sender ID.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sender_id(id, opts = {})
      delete_sender_id_with_http_info(id, opts)
      nil
    end

    # Delete a Sender ID.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_sender_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_sender_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_sender_id"
      end
      # resource path
      local_var_path = '/api/v2/senderids/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_sender_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a survey.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_survey(id, opts = {})
      delete_survey_with_http_info(id, opts)
      nil
    end

    # Delete a survey.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_survey_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_survey ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_survey"
      end
      # resource path
      local_var_path = '/api/v2/surveys/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a node.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_survey_node(id, opts = {})
      delete_survey_node_with_http_info(id, opts)
      nil
    end

    # Delete a node.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_survey_node_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_survey_node ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_survey_node"
      end
      # resource path
      local_var_path = '/api/v2/surveys/nodes/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_survey_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a single template.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_template(id, opts = {})
      delete_template_with_http_info(id, opts)
      nil
    end

    # Delete a single template.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_template ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.delete_template"
      end
      # resource path
      local_var_path = '/api/v2/templates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete template by given ID(s) or delete all templates.
    # @param delete_templates_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def delete_templates_bulk(delete_templates_bulk_input_object, opts = {})
      delete_templates_bulk_with_http_info(delete_templates_bulk_input_object, opts)
      nil
    end

    # Delete template by given ID(s) or delete all templates.
    # @param delete_templates_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_templates_bulk_with_http_info(delete_templates_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.delete_templates_bulk ...'
      end
      # verify the required parameter 'delete_templates_bulk_input_object' is set
      if @api_client.config.client_side_validation && delete_templates_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'delete_templates_bulk_input_object' when calling TextMagicApi.delete_templates_bulk"
      end
      # resource path
      local_var_path = '/api/v2/templates/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_templates_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#delete_templates_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Authenticate user by given username and password.
    # Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
    # @param do_auth_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [DoAuthResponse]
    def do_auth(do_auth_input_object, opts = {})
      data, _status_code, _headers = do_auth_with_http_info(do_auth_input_object, opts)
      data
    end

    # Authenticate user by given username and password.
    # Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
    # @param do_auth_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(DoAuthResponse, Fixnum, Hash)>] DoAuthResponse data, response status code and response headers
    def do_auth_with_http_info(do_auth_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.do_auth ...'
      end
      # verify the required parameter 'do_auth_input_object' is set
      if @api_client.config.client_side_validation && do_auth_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'do_auth_input_object' when calling TextMagicApi.do_auth"
      end
      # resource path
      local_var_path = '/api/v2/auth'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(do_auth_input_object)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DoAuthResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#do_auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Carrier Lookup
    # @param phone 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country Country code for local formatted numbers (default to US)
    # @return [DoCarrierLookupResponse]
    def do_carrier_lookup(phone, opts = {})
      data, _status_code, _headers = do_carrier_lookup_with_http_info(phone, opts)
      data
    end

    # Carrier Lookup
    # @param phone 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country Country code for local formatted numbers
    # @return [Array<(DoCarrierLookupResponse, Fixnum, Hash)>] DoCarrierLookupResponse data, response status code and response headers
    def do_carrier_lookup_with_http_info(phone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.do_carrier_lookup ...'
      end
      # verify the required parameter 'phone' is set
      if @api_client.config.client_side_validation && phone.nil?
        fail ArgumentError, "Missing the required parameter 'phone' when calling TextMagicApi.do_carrier_lookup"
      end
      # resource path
      local_var_path = '/api/v2/lookups/{phone}'.sub('{' + 'phone' + '}', phone.to_s)

      # query parameters
      query_params = {}
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DoCarrierLookupResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#do_carrier_lookup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate Email address using Email Lookup tool
    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [DoEmailLookupResponse]
    def do_email_lookup(email, opts = {})
      data, _status_code, _headers = do_email_lookup_with_http_info(email, opts)
      data
    end

    # Validate Email address using Email Lookup tool
    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DoEmailLookupResponse, Fixnum, Hash)>] DoEmailLookupResponse data, response status code and response headers
    def do_email_lookup_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.do_email_lookup ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling TextMagicApi.do_email_lookup"
      end
      # resource path
      local_var_path = '/api/v2/email-lookups/{email}'.sub('{' + 'email' + '}', email.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DoEmailLookupResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#do_email_lookup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Duplicate a survey.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [ResourceLinkResponse]
    def duplicate_survey(id, opts = {})
      data, _status_code, _headers = duplicate_survey_with_http_info(id, opts)
      data
    end

    # Duplicate a survey.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def duplicate_survey_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.duplicate_survey ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.duplicate_survey"
      end
      # resource path
      local_var_path = '/api/v2/surveys/{id}/duplicate'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#duplicate_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all bulk sending sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @return [GetAllBulkSessionsResponse]
    def get_all_bulk_sessions(opts = {})
      data, _status_code, _headers = get_all_bulk_sessions_with_http_info(opts)
      data
    end

    # Get all bulk sending sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @return [Array<(GetAllBulkSessionsResponse, Fixnum, Hash)>] GetAllBulkSessionsResponse data, response status code and response headers
    def get_all_bulk_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_all_bulk_sessions ...'
      end
      # resource path
      local_var_path = '/api/v2/bulks'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAllBulkSessionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_all_bulk_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all user chats.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Fetch only (a)ctive, (c)losed or (d)eleted chats
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :order_by Order results by some field. Default is id (default to id)
    # @option opts [Integer] :voice Fetch results with voice calls (default to 0)
    # @option opts [Integer] :flat Should additional contact info be included (default to 0)
    # @return [GetAllChatsResponse]
    def get_all_chats(opts = {})
      data, _status_code, _headers = get_all_chats_with_http_info(opts)
      data
    end

    # Get all user chats.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Fetch only (a)ctive, (c)losed or (d)eleted chats
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :order_by Order results by some field. Default is id
    # @option opts [Integer] :voice Fetch results with voice calls
    # @option opts [Integer] :flat Should additional contact info be included
    # @return [Array<(GetAllChatsResponse, Fixnum, Hash)>] GetAllChatsResponse data, response status code and response headers
    def get_all_chats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_all_chats ...'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['a', 'c', 'd'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of a, c, d'
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['id', 'unread', 'messageTime'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of id, unread, messageTime'
      end
      # resource path
      local_var_path = '/api/v2/chats'

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'voice'] = opts[:'voice'] if !opts[:'voice'].nil?
      query_params[:'flat'] = opts[:'flat'] if !opts[:'flat'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAllChatsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_all_chats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all inbox messages.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :order_by Order results by some field. Default is id (default to id)
    # @option opts [String] :direction Order direction. Default is desc (default to desc)
    # @return [GetAllInboundMessagesResponse]
    def get_all_inbound_messages(opts = {})
      data, _status_code, _headers = get_all_inbound_messages_with_http_info(opts)
      data
    end

    # Get all inbox messages.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :order_by Order results by some field. Default is id
    # @option opts [String] :direction Order direction. Default is desc
    # @return [Array<(GetAllInboundMessagesResponse, Fixnum, Hash)>] GetAllInboundMessagesResponse data, response status code and response headers
    def get_all_inbound_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_all_inbound_messages ...'
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['id', 'sender', 'receiver', 'messageTime', 'firstName', 'lastName'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of id, sender, receiver, messageTime, firstName, lastName'
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['asc', 'desc'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v2/replies'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAllInboundMessagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_all_inbound_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all message sending sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @return [GetAllMessageSessionsResponse]
    def get_all_message_sessions(opts = {})
      data, _status_code, _headers = get_all_message_sessions_with_http_info(opts)
      data
    end

    # Get all message sending sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @return [Array<(GetAllMessageSessionsResponse, Fixnum, Hash)>] GetAllMessageSessionsResponse data, response status code and response headers
    def get_all_message_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_all_message_sessions ...'
      end
      # resource path
      local_var_path = '/api/v2/sessions'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAllMessageSessionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_all_message_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all messages
    # Get all user oubound messages.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [Integer] :last_id Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified
    # @return [GetAllOutboundMessagesResponse]
    def get_all_outbound_messages(opts = {})
      data, _status_code, _headers = get_all_outbound_messages_with_http_info(opts)
      data
    end

    # Get all messages
    # Get all user oubound messages.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [Integer] :last_id Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified
    # @return [Array<(GetAllOutboundMessagesResponse, Fixnum, Hash)>] GetAllOutboundMessagesResponse data, response status code and response headers
    def get_all_outbound_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_all_outbound_messages ...'
      end
      # resource path
      local_var_path = '/api/v2/messages'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastId'] = opts[:'last_id'] if !opts[:'last_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAllOutboundMessagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_all_outbound_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all scheduled messages.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :status Fetch schedules with the specific status: a - actual, c - completed, x - all (default to x)
    # @option opts [String] :order_by Order results by some field. Default is id (default to id)
    # @option opts [String] :direction Order direction. Default is desc (default to desc)
    # @return [GetAllScheduledMessagesResponse]
    def get_all_scheduled_messages(opts = {})
      data, _status_code, _headers = get_all_scheduled_messages_with_http_info(opts)
      data
    end

    # Get all scheduled messages.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :status Fetch schedules with the specific status: a - actual, c - completed, x - all
    # @option opts [String] :order_by Order results by some field. Default is id
    # @option opts [String] :direction Order direction. Default is desc
    # @return [Array<(GetAllScheduledMessagesResponse, Fixnum, Hash)>] GetAllScheduledMessagesResponse data, response status code and response headers
    def get_all_scheduled_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_all_scheduled_messages ...'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['a', 'c', 'x'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of a, c, x'
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['id', 'nextSend', 'lastSend'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of id, nextSend, lastSend'
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['asc', 'desc'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v2/schedules'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAllScheduledMessagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_all_scheduled_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all user templates.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @return [GetAllTemplatesResponse]
    def get_all_templates(opts = {})
      data, _status_code, _headers = get_all_templates_with_http_info(opts)
      data
    end

    # Get all user templates.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @return [Array<(GetAllTemplatesResponse, Fixnum, Hash)>] GetAllTemplatesResponse data, response status code and response headers
    def get_all_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_all_templates ...'
      end
      # resource path
      local_var_path = '/api/v2/templates'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAllTemplatesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_all_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find available dedicated numbers to buy.
    # @param country Dedicated number country. Two letters in upper case
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :prefix Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (default to 1)
    # @option opts [Integer] :tollfree Should we show only tollfree numbers (tollfree available only for US). Default is false. (default to 0)
    # @return [GetAvailableDedicatedNumbersResponse]
    def get_available_dedicated_numbers(country, opts = {})
      data, _status_code, _headers = get_available_dedicated_numbers_with_http_info(country, opts)
      data
    end

    # Find available dedicated numbers to buy.
    # @param country Dedicated number country. Two letters in upper case
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :prefix Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore.
    # @option opts [Integer] :tollfree Should we show only tollfree numbers (tollfree available only for US). Default is false.
    # @return [Array<(GetAvailableDedicatedNumbersResponse, Fixnum, Hash)>] GetAvailableDedicatedNumbersResponse data, response status code and response headers
    def get_available_dedicated_numbers_with_http_info(country, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_available_dedicated_numbers ...'
      end
      # verify the required parameter 'country' is set
      if @api_client.config.client_side_validation && country.nil?
        fail ArgumentError, "Missing the required parameter 'country' when calling TextMagicApi.get_available_dedicated_numbers"
      end
      # resource path
      local_var_path = '/api/v2/numbers/available'

      # query parameters
      query_params = {}
      query_params[:'country'] = country
      query_params[:'prefix'] = opts[:'prefix'] if !opts[:'prefix'].nil?
      query_params[:'tollfree'] = opts[:'tollfree'] if !opts[:'tollfree'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAvailableDedicatedNumbersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_available_dedicated_numbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all available sender setting options which could be used in \"from\" parameter of POST messages method.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country Return sender setting options available in specific country only. Two upper case characters
    # @return [GetAvailableSenderSettingOptionsResponse]
    def get_available_sender_setting_options(opts = {})
      data, _status_code, _headers = get_available_sender_setting_options_with_http_info(opts)
      data
    end

    # Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country Return sender setting options available in specific country only. Two upper case characters
    # @return [Array<(GetAvailableSenderSettingOptionsResponse, Fixnum, Hash)>] GetAvailableSenderSettingOptionsResponse data, response status code and response headers
    def get_available_sender_setting_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_available_sender_setting_options ...'
      end
      # resource path
      local_var_path = '/api/v2/sources'

      # query parameters
      query_params = {}
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAvailableSenderSettingOptionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_available_sender_setting_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
    # @param [Hash] opts the optional parameters
    # @return [GetBalanceNotificationOptionsResponse]
    def get_balance_notification_options(opts = {})
      data, _status_code, _headers = get_balance_notification_options_with_http_info(opts)
      data
    end

    # Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetBalanceNotificationOptionsResponse, Fixnum, Hash)>] GetBalanceNotificationOptionsResponse data, response status code and response headers
    def get_balance_notification_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_balance_notification_options ...'
      end
      # resource path
      local_var_path = '/api/v2/user/notification/balance/bundles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetBalanceNotificationOptionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_balance_notification_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get balance notification settings
    # @param [Hash] opts the optional parameters
    # @return [GetBalanceNotificationSettingsResponse]
    def get_balance_notification_settings(opts = {})
      data, _status_code, _headers = get_balance_notification_settings_with_http_info(opts)
      data
    end

    # Get balance notification settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetBalanceNotificationSettingsResponse, Fixnum, Hash)>] GetBalanceNotificationSettingsResponse data, response status code and response headers
    def get_balance_notification_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_balance_notification_settings ...'
      end
      # resource path
      local_var_path = '/api/v2/user/notification/balance'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetBalanceNotificationSettingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_balance_notification_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get blocked contacts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :query Find blocked contacts by specified search query
    # @option opts [String] :order_by Order results by some field. Default is id (default to id)
    # @option opts [String] :direction Order direction. Default is desc (default to desc)
    # @return [GetBlockedContactsResponse]
    def get_blocked_contacts(opts = {})
      data, _status_code, _headers = get_blocked_contacts_with_http_info(opts)
      data
    end

    # Get blocked contacts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :query Find blocked contacts by specified search query
    # @option opts [String] :order_by Order results by some field. Default is id
    # @option opts [String] :direction Order direction. Default is desc
    # @return [Array<(GetBlockedContactsResponse, Fixnum, Hash)>] GetBlockedContactsResponse data, response status code and response headers
    def get_blocked_contacts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_blocked_contacts ...'
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['id', 'firstName', 'lastName'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of id, firstName, lastName'
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['asc', 'desc'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v2/contacts/block/list'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetBlockedContactsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_blocked_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get bulk message session status.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [BulkSession]
    def get_bulk_session(id, opts = {})
      data, _status_code, _headers = get_bulk_session_with_http_info(id, opts)
      data
    end

    # Get bulk message session status.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BulkSession, Fixnum, Hash)>] BulkSession data, response status code and response headers
    def get_bulk_session_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_bulk_session ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_bulk_session"
      end
      # resource path
      local_var_path = '/api/v2/bulks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_bulk_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch callback URL settings
    # @param [Hash] opts the optional parameters
    # @return [GetCallbackSettingsResponse]
    def get_callback_settings(opts = {})
      data, _status_code, _headers = get_callback_settings_with_http_info(opts)
      data
    end

    # Fetch callback URL settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCallbackSettingsResponse, Fixnum, Hash)>] GetCallbackSettingsResponse data, response status code and response headers
    def get_callback_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_callback_settings ...'
      end
      # resource path
      local_var_path = '/api/v2/callback/settings'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetCallbackSettingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_callback_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check pricing for a inbound/outbound call.
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_calls_prices(opts = {})
      data, _status_code, _headers = get_calls_prices_with_http_info(opts)
      data
    end

    # Check pricing for a inbound/outbound call.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_calls_prices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_calls_prices ...'
      end
      # resource path
      local_var_path = '/api/v2/calls/price'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_calls_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single chat.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Chat]
    def get_chat(id, opts = {})
      data, _status_code, _headers = get_chat_with_http_info(id, opts)
      data
    end

    # Get a single chat.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Chat, Fixnum, Hash)>] Chat data, response status code and response headers
    def get_chat_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_chat ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_chat"
      end
      # resource path
      local_var_path = '/api/v2/chats/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Chat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find chats by phone.
    # @param phone 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :upsert Create a new chat if not found (default to 0)
    # @option opts [Integer] :reopen Reopen chat if found or do not change status (default to 0)
    # @return [Chat]
    def get_chat_by_phone(phone, opts = {})
      data, _status_code, _headers = get_chat_by_phone_with_http_info(phone, opts)
      data
    end

    # Find chats by phone.
    # @param phone 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :upsert Create a new chat if not found
    # @option opts [Integer] :reopen Reopen chat if found or do not change status
    # @return [Array<(Chat, Fixnum, Hash)>] Chat data, response status code and response headers
    def get_chat_by_phone_with_http_info(phone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_chat_by_phone ...'
      end
      # verify the required parameter 'phone' is set
      if @api_client.config.client_side_validation && phone.nil?
        fail ArgumentError, "Missing the required parameter 'phone' when calling TextMagicApi.get_chat_by_phone"
      end
      # resource path
      local_var_path = '/api/v2/chats/{phone}/by/phone'.sub('{' + 'phone' + '}', phone.to_s)

      # query parameters
      query_params = {}
      query_params[:'upsert'] = opts[:'upsert'] if !opts[:'upsert'].nil?
      query_params[:'reopen'] = opts[:'reopen'] if !opts[:'reopen'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Chat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_chat_by_phone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch messages from chat with specified chat id.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :query Find messages by specified search query
    # @option opts [Integer] :start Return messages since specified timestamp only
    # @option opts [Integer] :_end Return messages up to specified timestamp only
    # @option opts [String] :direction Order direction. Default is desc (default to desc)
    # @option opts [Integer] :voice Fetch results with voice calls (default to 0)
    # @return [GetChatMessagesResponse]
    def get_chat_messages(id, opts = {})
      data, _status_code, _headers = get_chat_messages_with_http_info(id, opts)
      data
    end

    # Fetch messages from chat with specified chat id.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :query Find messages by specified search query
    # @option opts [Integer] :start Return messages since specified timestamp only
    # @option opts [Integer] :_end Return messages up to specified timestamp only
    # @option opts [String] :direction Order direction. Default is desc
    # @option opts [Integer] :voice Fetch results with voice calls
    # @return [Array<(GetChatMessagesResponse, Fixnum, Hash)>] GetChatMessagesResponse data, response status code and response headers
    def get_chat_messages_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_chat_messages ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_chat_messages"
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['asc', 'desc'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v2/chats/{id}/message'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'voice'] = opts[:'voice'] if !opts[:'voice'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetChatMessagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_chat_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single contact.
    # @param id The contact id
    # @param [Hash] opts the optional parameters
    # @return [Contact]
    def get_contact(id, opts = {})
      data, _status_code, _headers = get_contact_with_http_info(id, opts)
      data
    end

    # Get a single contact.
    # @param id The contact id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contact, Fixnum, Hash)>] Contact data, response status code and response headers
    def get_contact_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_contact ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_contact"
      end
      # resource path
      local_var_path = '/api/v2/contacts/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Contact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single contact by phone number.
    # @param phone 
    # @param [Hash] opts the optional parameters
    # @return [Contact]
    def get_contact_by_phone(phone, opts = {})
      data, _status_code, _headers = get_contact_by_phone_with_http_info(phone, opts)
      data
    end

    # Get a single contact by phone number.
    # @param phone 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contact, Fixnum, Hash)>] Contact data, response status code and response headers
    def get_contact_by_phone_with_http_info(phone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_contact_by_phone ...'
      end
      # verify the required parameter 'phone' is set
      if @api_client.config.client_side_validation && phone.nil?
        fail ArgumentError, "Missing the required parameter 'phone' when calling TextMagicApi.get_contact_by_phone"
      end
      # resource path
      local_var_path = '/api/v2/contacts/phone/{phone}'.sub('{' + 'phone' + '}', phone.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Contact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_contact_by_phone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check is that phone number blocked
    # @param phone Phone number to check
    # @param [Hash] opts the optional parameters
    # @return [Contact]
    def get_contact_if_blocked(phone, opts = {})
      data, _status_code, _headers = get_contact_if_blocked_with_http_info(phone, opts)
      data
    end

    # Check is that phone number blocked
    # @param phone Phone number to check
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contact, Fixnum, Hash)>] Contact data, response status code and response headers
    def get_contact_if_blocked_with_http_info(phone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_contact_if_blocked ...'
      end
      # verify the required parameter 'phone' is set
      if @api_client.config.client_side_validation && phone.nil?
        fail ArgumentError, "Missing the required parameter 'phone' when calling TextMagicApi.get_contact_if_blocked"
      end
      # resource path
      local_var_path = '/api/v2/contacts/block/phone'

      # query parameters
      query_params = {}
      query_params[:'phone'] = phone

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Contact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_contact_if_blocked\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get contact import session progress.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [GetContactImportSessionProgressResponse]
    def get_contact_import_session_progress(id, opts = {})
      data, _status_code, _headers = get_contact_import_session_progress_with_http_info(id, opts)
      data
    end

    # Get contact import session progress.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetContactImportSessionProgressResponse, Fixnum, Hash)>] GetContactImportSessionProgressResponse data, response status code and response headers
    def get_contact_import_session_progress_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_contact_import_session_progress ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_contact_import_session_progress"
      end
      # resource path
      local_var_path = '/api/v2/contacts/import/progress/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetContactImportSessionProgressResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_contact_import_session_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single contact note.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [ContactNote]
    def get_contact_note(id, opts = {})
      data, _status_code, _headers = get_contact_note_with_http_info(id, opts)
      data
    end

    # Get a single contact note.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContactNote, Fixnum, Hash)>] ContactNote data, response status code and response headers
    def get_contact_note_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_contact_note ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_contact_note"
      end
      # resource path
      local_var_path = '/api/v2/notes/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContactNote')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_contact_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch notes assigned to the given contact.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @return [GetContactNotesResponse]
    def get_contact_notes(id, opts = {})
      data, _status_code, _headers = get_contact_notes_with_http_info(id, opts)
      data
    end

    # Fetch notes assigned to the given contact.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @return [Array<(GetContactNotesResponse, Fixnum, Hash)>] GetContactNotesResponse data, response status code and response headers
    def get_contact_notes_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_contact_notes ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_contact_notes"
      end
      # resource path
      local_var_path = '/api/v2/contacts/{id}/notes'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetContactNotesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_contact_notes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all user contacts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [Integer] :shared Should shared contacts to be included (default to 0)
    # @option opts [String] :order_by Order results by some field. Default is id (default to id)
    # @option opts [String] :direction Order direction. Default is desc (default to desc)
    # @return [GetContactsResponse]
    def get_contacts(opts = {})
      data, _status_code, _headers = get_contacts_with_http_info(opts)
      data
    end

    # Get all user contacts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [Integer] :shared Should shared contacts to be included
    # @option opts [String] :order_by Order results by some field. Default is id
    # @option opts [String] :direction Order direction. Default is desc
    # @return [Array<(GetContactsResponse, Fixnum, Hash)>] GetContactsResponse data, response status code and response headers
    def get_contacts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_contacts ...'
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['id', 'firstName', 'lastName'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of id, firstName, lastName'
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['asc', 'desc'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v2/contacts'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'shared'] = opts[:'shared'] if !opts[:'shared'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetContactsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get contacts autocomplete suggestions by given search term.
    # @param query Find recipients by specified search query
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [Integer] :lists Should lists be returned or not (default to 0)
    # @return [Array<GetContactsAutocompleteResponse>]
    def get_contacts_autocomplete(query, opts = {})
      data, _status_code, _headers = get_contacts_autocomplete_with_http_info(query, opts)
      data
    end

    # Get contacts autocomplete suggestions by given search term.
    # @param query Find recipients by specified search query
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many results to return
    # @option opts [Integer] :lists Should lists be returned or not
    # @return [Array<(Array<GetContactsAutocompleteResponse>, Fixnum, Hash)>] Array<GetContactsAutocompleteResponse> data, response status code and response headers
    def get_contacts_autocomplete_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_contacts_autocomplete ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling TextMagicApi.get_contacts_autocomplete"
      end
      # resource path
      local_var_path = '/api/v2/contacts/autocomplete'

      # query parameters
      query_params = {}
      query_params[:'query'] = query
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lists'] = opts[:'lists'] if !opts[:'lists'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<GetContactsAutocompleteResponse>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_contacts_autocomplete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch user contacts by given group id.
    # A useful synonym for \"contacts/search\" command with provided \"listId\" parameter.
    # @param id Given group Id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :order_by Order results by some field. Default is id (default to id)
    # @option opts [String] :direction Order direction. Default is desc (default to desc)
    # @return [GetContactsByListIdResponse]
    def get_contacts_by_list_id(id, opts = {})
      data, _status_code, _headers = get_contacts_by_list_id_with_http_info(id, opts)
      data
    end

    # Fetch user contacts by given group id.
    # A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
    # @param id Given group Id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :order_by Order results by some field. Default is id
    # @option opts [String] :direction Order direction. Default is desc
    # @return [Array<(GetContactsByListIdResponse, Fixnum, Hash)>] GetContactsByListIdResponse data, response status code and response headers
    def get_contacts_by_list_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_contacts_by_list_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_contacts_by_list_id"
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['id', 'firstName', 'lastName'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of id, firstName, lastName'
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['asc', 'desc'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v2/lists/{id}/contacts'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetContactsByListIdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_contacts_by_list_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return list of countries.
    # @param [Hash] opts the optional parameters
    # @return [Array<Country>]
    def get_countries(opts = {})
      data, _status_code, _headers = get_countries_with_http_info(opts)
      data
    end

    # Return list of countries.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Country>, Fixnum, Hash)>] Array<Country> data, response status code and response headers
    def get_countries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_countries ...'
      end
      # resource path
      local_var_path = '/api/v2/countries'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Country>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_countries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current user info.
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_current_user(opts = {})
      data, _status_code, _headers = get_current_user_with_http_info(opts)
      data
    end

    # Get current user info.
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def get_current_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_current_user ...'
      end
      # resource path
      local_var_path = '/api/v2/user'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_current_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single custom field.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [UserCustomField]
    def get_custom_field(id, opts = {})
      data, _status_code, _headers = get_custom_field_with_http_info(id, opts)
      data
    end

    # Get a single custom field.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserCustomField, Fixnum, Hash)>] UserCustomField data, response status code and response headers
    def get_custom_field_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_custom_field ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_custom_field"
      end
      # resource path
      local_var_path = '/api/v2/customfields/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserCustomField')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all contact custom fields.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @return [GetCustomFieldsResponse]
    def get_custom_fields(opts = {})
      data, _status_code, _headers = get_custom_fields_with_http_info(opts)
      data
    end

    # Get all contact custom fields.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @return [Array<(GetCustomFieldsResponse, Fixnum, Hash)>] GetCustomFieldsResponse data, response status code and response headers
    def get_custom_fields_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_custom_fields ...'
      end
      # resource path
      local_var_path = '/api/v2/customfields'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetCustomFieldsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single dedicated number.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [UsersInbound]
    def get_dedicated_number(id, opts = {})
      data, _status_code, _headers = get_dedicated_number_with_http_info(id, opts)
      data
    end

    # Get a single dedicated number.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsersInbound, Fixnum, Hash)>] UsersInbound data, response status code and response headers
    def get_dedicated_number_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_dedicated_number ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_dedicated_number"
      end
      # resource path
      local_var_path = '/api/v2/numbers/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UsersInbound')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_dedicated_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an array of all rules that are disallowed to the current account.
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_disallowed_rules(opts = {})
      data, _status_code, _headers = get_disallowed_rules_with_http_info(opts)
      data
    end

    # Get an array of all rules that are disallowed to the current account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_disallowed_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_disallowed_rules ...'
      end
      # resource path
      local_var_path = '/api/v2/user/disallowed-rules'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_disallowed_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get favorite contacts and lists.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :query Find contacts or lists by specified search query (default to A)
    # @return [GetFavouritesResponse]
    def get_favourites(opts = {})
      data, _status_code, _headers = get_favourites_with_http_info(opts)
      data
    end

    # Get favorite contacts and lists.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :query Find contacts or lists by specified search query
    # @return [Array<(GetFavouritesResponse, Fixnum, Hash)>] GetFavouritesResponse data, response status code and response headers
    def get_favourites_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_favourites ...'
      end
      # resource path
      local_var_path = '/api/v2/contacts/favorite'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetFavouritesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_favourites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all forwarded calls.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @return [GetForwardedCallsResponse]
    def get_forwarded_calls(opts = {})
      data, _status_code, _headers = get_forwarded_calls_with_http_info(opts)
      data
    end

    # Get all forwarded calls.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @return [Array<(GetForwardedCallsResponse, Fixnum, Hash)>] GetForwardedCallsResponse data, response status code and response headers
    def get_forwarded_calls_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_forwarded_calls ...'
      end
      # resource path
      local_var_path = '/api/v2/calls'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetForwardedCallsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_forwarded_calls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single inbox message.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [MessageIn]
    def get_inbound_message(id, opts = {})
      data, _status_code, _headers = get_inbound_message_with_http_info(id, opts)
      data
    end

    # Get a single inbox message.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageIn, Fixnum, Hash)>] MessageIn data, response status code and response headers
    def get_inbound_message_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_inbound_message ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_inbound_message"
      end
      # resource path
      local_var_path = '/api/v2/replies/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageIn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_inbound_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get inbound messages notification settings
    # @param [Hash] opts the optional parameters
    # @return [GetInboundMessagesNotificationSettingsResponse]
    def get_inbound_messages_notification_settings(opts = {})
      data, _status_code, _headers = get_inbound_messages_notification_settings_with_http_info(opts)
      data
    end

    # Get inbound messages notification settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetInboundMessagesNotificationSettingsResponse, Fixnum, Hash)>] GetInboundMessagesNotificationSettingsResponse data, response status code and response headers
    def get_inbound_messages_notification_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_inbound_messages_notification_settings ...'
      end
      # resource path
      local_var_path = '/api/v2/user/notification/inbound'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetInboundMessagesNotificationSettingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_inbound_messages_notification_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return account invoices.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @return [GetInvoicesResponse]
    def get_invoices(opts = {})
      data, _status_code, _headers = get_invoices_with_http_info(opts)
      data
    end

    # Return account invoices.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @return [Array<(GetInvoicesResponse, Fixnum, Hash)>] GetInvoicesResponse data, response status code and response headers
    def get_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_invoices ...'
      end
      # resource path
      local_var_path = '/api/v2/invoices'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetInvoicesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single list.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def get_list(id, opts = {})
      data, _status_code, _headers = get_list_with_http_info(id, opts)
      data
    end

    # Get a single list.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def get_list_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_list ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_list"
      end
      # resource path
      local_var_path = '/api/v2/lists/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all contacts IDs belonging to the list with ID.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [GetListContactsIdsResponse]
    def get_list_contacts_ids(id, opts = {})
      data, _status_code, _headers = get_list_contacts_ids_with_http_info(id, opts)
      data
    end

    # Fetch all contacts IDs belonging to the list with ID.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetListContactsIdsResponse, Fixnum, Hash)>] GetListContactsIdsResponse data, response status code and response headers
    def get_list_contacts_ids_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_list_contacts_ids ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_list_contacts_ids"
      end
      # resource path
      local_var_path = '/api/v2/lists/{id}/contacts/ids'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetListContactsIdsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_list_contacts_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return lists which contact belongs to.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @return [GetListsOfContactResponse]
    def get_lists_of_contact(id, opts = {})
      data, _status_code, _headers = get_lists_of_contact_with_http_info(id, opts)
      data
    end

    # Return lists which contact belongs to.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @return [Array<(GetListsOfContactResponse, Fixnum, Hash)>] GetListsOfContactResponse data, response status code and response headers
    def get_lists_of_contact_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_lists_of_contact ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_lists_of_contact"
      end
      # resource path
      local_var_path = '/api/v2/contacts/{id}/lists'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetListsOfContactResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_lists_of_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Preview message
    # Get messages preview (with tags merged) up to 100 messages per session.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :text Message text. Required if template_id is not set
    # @option opts [Integer] :template_id Template used instead of message text. Required if text is not set
    # @option opts [Integer] :sending_time DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now
    # @option opts [String] :sending_date_time Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone
    # @option opts [String] :sending_timezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone
    # @option opts [String] :contacts Comma separated array of contact resources id message will be sent to
    # @option opts [String] :lists Comma separated array of list resources id message will be sent to
    # @option opts [String] :phones Comma separated array of E.164 phone numbers message will be sent to
    # @option opts [Integer] :cut_extra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (default to 0)
    # @option opts [Integer] :parts_count Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (default to 6)
    # @option opts [Integer] :reference_id Custom message reference id which can be used in your application infrastructure
    # @option opts [String] :from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery
    # @option opts [String] :rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details
    # @option opts [Integer] :create_chat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (default to 0)
    # @option opts [Integer] :tts Send Text to Speech message. Default is 0 (default to 0)
    # @option opts [Integer] :local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (default to 0)
    # @option opts [String] :local_country 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country
    # @return [GetMessagePreviewResponse]
    def get_message_preview(opts = {})
      data, _status_code, _headers = get_message_preview_with_http_info(opts)
      data
    end

    # Preview message
    # Get messages preview (with tags merged) up to 100 messages per session.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :text Message text. Required if template_id is not set
    # @option opts [Integer] :template_id Template used instead of message text. Required if text is not set
    # @option opts [Integer] :sending_time DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now
    # @option opts [String] :sending_date_time Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone
    # @option opts [String] :sending_timezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone
    # @option opts [String] :contacts Comma separated array of contact resources id message will be sent to
    # @option opts [String] :lists Comma separated array of list resources id message will be sent to
    # @option opts [String] :phones Comma separated array of E.164 phone numbers message will be sent to
    # @option opts [Integer] :cut_extra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0
    # @option opts [Integer] :parts_count Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6
    # @option opts [Integer] :reference_id Custom message reference id which can be used in your application infrastructure
    # @option opts [String] :from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery
    # @option opts [String] :rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details
    # @option opts [Integer] :create_chat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0
    # @option opts [Integer] :tts Send Text to Speech message. Default is 0
    # @option opts [Integer] :local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0
    # @option opts [String] :local_country 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country
    # @return [Array<(GetMessagePreviewResponse, Fixnum, Hash)>] GetMessagePreviewResponse data, response status code and response headers
    def get_message_preview_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_message_preview ...'
      end
      # resource path
      local_var_path = '/api/v2/messages/preview'

      # query parameters
      query_params = {}
      query_params[:'text'] = opts[:'text'] if !opts[:'text'].nil?
      query_params[:'templateId'] = opts[:'template_id'] if !opts[:'template_id'].nil?
      query_params[:'sendingTime'] = opts[:'sending_time'] if !opts[:'sending_time'].nil?
      query_params[:'sendingDateTime'] = opts[:'sending_date_time'] if !opts[:'sending_date_time'].nil?
      query_params[:'sendingTimezone'] = opts[:'sending_timezone'] if !opts[:'sending_timezone'].nil?
      query_params[:'contacts'] = opts[:'contacts'] if !opts[:'contacts'].nil?
      query_params[:'lists'] = opts[:'lists'] if !opts[:'lists'].nil?
      query_params[:'phones'] = opts[:'phones'] if !opts[:'phones'].nil?
      query_params[:'cutExtra'] = opts[:'cut_extra'] if !opts[:'cut_extra'].nil?
      query_params[:'partsCount'] = opts[:'parts_count'] if !opts[:'parts_count'].nil?
      query_params[:'referenceId'] = opts[:'reference_id'] if !opts[:'reference_id'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'rule'] = opts[:'rule'] if !opts[:'rule'].nil?
      query_params[:'createChat'] = opts[:'create_chat'] if !opts[:'create_chat'].nil?
      query_params[:'tts'] = opts[:'tts'] if !opts[:'tts'].nil?
      query_params[:'local'] = opts[:'local'] if !opts[:'local'].nil?
      query_params[:'localCountry'] = opts[:'local_country'] if !opts[:'local_country'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetMessagePreviewResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_message_preview\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check price
    # Check pricing for a new outbound message.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :include_blocked Should we show pricing for the blocked contacts. (default to 0)
    # @option opts [String] :text Message text. Required if template_id is not set
    # @option opts [Integer] :template_id Template used instead of message text. Required if text is not set
    # @option opts [Integer] :sending_time DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now
    # @option opts [String] :sending_date_time Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone
    # @option opts [String] :sending_timezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone
    # @option opts [String] :contacts Comma separated array of contact resources id message will be sent to
    # @option opts [String] :lists Comma separated array of list resources id message will be sent to
    # @option opts [String] :phones Comma separated array of E.164 phone numbers message will be sent to
    # @option opts [Integer] :cut_extra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (default to 0)
    # @option opts [Integer] :parts_count Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (default to 6)
    # @option opts [Integer] :reference_id Custom message reference id which can be used in your application infrastructure
    # @option opts [String] :from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery
    # @option opts [String] :rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details
    # @option opts [Integer] :create_chat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (default to 0)
    # @option opts [Integer] :tts Send Text to Speech message. Default is 0 (default to 0)
    # @option opts [Integer] :local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (default to 0)
    # @option opts [String] :local_country 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country
    # @return [GetMessagePriceResponse]
    def get_message_price(opts = {})
      data, _status_code, _headers = get_message_price_with_http_info(opts)
      data
    end

    # Check price
    # Check pricing for a new outbound message.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :include_blocked Should we show pricing for the blocked contacts.
    # @option opts [String] :text Message text. Required if template_id is not set
    # @option opts [Integer] :template_id Template used instead of message text. Required if text is not set
    # @option opts [Integer] :sending_time DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now
    # @option opts [String] :sending_date_time Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone
    # @option opts [String] :sending_timezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone
    # @option opts [String] :contacts Comma separated array of contact resources id message will be sent to
    # @option opts [String] :lists Comma separated array of list resources id message will be sent to
    # @option opts [String] :phones Comma separated array of E.164 phone numbers message will be sent to
    # @option opts [Integer] :cut_extra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0
    # @option opts [Integer] :parts_count Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6
    # @option opts [Integer] :reference_id Custom message reference id which can be used in your application infrastructure
    # @option opts [String] :from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery
    # @option opts [String] :rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details
    # @option opts [Integer] :create_chat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0
    # @option opts [Integer] :tts Send Text to Speech message. Default is 0
    # @option opts [Integer] :local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0
    # @option opts [String] :local_country 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country
    # @return [Array<(GetMessagePriceResponse, Fixnum, Hash)>] GetMessagePriceResponse data, response status code and response headers
    def get_message_price_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_message_price ...'
      end
      # resource path
      local_var_path = '/api/v2/messages/price'

      # query parameters
      query_params = {}
      query_params[:'includeBlocked'] = opts[:'include_blocked'] if !opts[:'include_blocked'].nil?
      query_params[:'text'] = opts[:'text'] if !opts[:'text'].nil?
      query_params[:'templateId'] = opts[:'template_id'] if !opts[:'template_id'].nil?
      query_params[:'sendingTime'] = opts[:'sending_time'] if !opts[:'sending_time'].nil?
      query_params[:'sendingDateTime'] = opts[:'sending_date_time'] if !opts[:'sending_date_time'].nil?
      query_params[:'sendingTimezone'] = opts[:'sending_timezone'] if !opts[:'sending_timezone'].nil?
      query_params[:'contacts'] = opts[:'contacts'] if !opts[:'contacts'].nil?
      query_params[:'lists'] = opts[:'lists'] if !opts[:'lists'].nil?
      query_params[:'phones'] = opts[:'phones'] if !opts[:'phones'].nil?
      query_params[:'cutExtra'] = opts[:'cut_extra'] if !opts[:'cut_extra'].nil?
      query_params[:'partsCount'] = opts[:'parts_count'] if !opts[:'parts_count'].nil?
      query_params[:'referenceId'] = opts[:'reference_id'] if !opts[:'reference_id'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'rule'] = opts[:'rule'] if !opts[:'rule'].nil?
      query_params[:'createChat'] = opts[:'create_chat'] if !opts[:'create_chat'].nil?
      query_params[:'tts'] = opts[:'tts'] if !opts[:'tts'].nil?
      query_params[:'local'] = opts[:'local'] if !opts[:'local'].nil?
      query_params[:'localCountry'] = opts[:'local_country'] if !opts[:'local_country'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetMessagePriceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_message_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get pricing
    # Get message prices for all countries.
    # @param [Hash] opts the optional parameters
    # @return [GetMessagePricesResponse]
    def get_message_prices(opts = {})
      data, _status_code, _headers = get_message_prices_with_http_info(opts)
      data
    end

    # Get pricing
    # Get message prices for all countries.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMessagePricesResponse, Fixnum, Hash)>] GetMessagePricesResponse data, response status code and response headers
    def get_message_prices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_message_prices ...'
      end
      # resource path
      local_var_path = '/api/v2/messages/prices'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetMessagePricesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_message_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a message session.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [MessageSession]
    def get_message_session(id, opts = {})
      data, _status_code, _headers = get_message_session_with_http_info(id, opts)
      data
    end

    # Get a message session.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageSession, Fixnum, Hash)>] MessageSession data, response status code and response headers
    def get_message_session_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_message_session ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_message_session"
      end
      # resource path
      local_var_path = '/api/v2/sessions/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_message_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get sending session statistics.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :include_deleted Search also in deleted messages (default to 0)
    # @return [GetMessageSessionStatResponse]
    def get_message_session_stat(id, opts = {})
      data, _status_code, _headers = get_message_session_stat_with_http_info(id, opts)
      data
    end

    # Get sending session statistics.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :include_deleted Search also in deleted messages
    # @return [Array<(GetMessageSessionStatResponse, Fixnum, Hash)>] GetMessageSessionStatResponse data, response status code and response headers
    def get_message_session_stat_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_message_session_stat ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_message_session_stat"
      end
      # resource path
      local_var_path = '/api/v2/sessions/{id}/stat'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetMessageSessionStatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_message_session_stat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch messages by given session id.
    # A useful synonym for \"messages/search\" command with provided \"sessionId\" parameter.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :statuses Find messages by status
    # @option opts [Integer] :include_deleted Search also in deleted messages (default to 0)
    # @return [GetMessagesBySessionIdResponse]
    def get_messages_by_session_id(id, opts = {})
      data, _status_code, _headers = get_messages_by_session_id_with_http_info(id, opts)
      data
    end

    # Fetch messages by given session id.
    # A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :statuses Find messages by status
    # @option opts [Integer] :include_deleted Search also in deleted messages
    # @return [Array<(GetMessagesBySessionIdResponse, Fixnum, Hash)>] GetMessagesBySessionIdResponse data, response status code and response headers
    def get_messages_by_session_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_messages_by_session_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_messages_by_session_id"
      end
      if @api_client.config.client_side_validation && opts[:'statuses'] && !['q', 's', 'e', 'r', 'a', 'd', 'b', 'f', 'u', 'j', 'i', 'p', 'h'].include?(opts[:'statuses'])
        fail ArgumentError, 'invalid value for "statuses", must be one of q, s, e, r, a, d, b, f, u, j, i, p, h'
      end
      # resource path
      local_var_path = '/api/v2/sessions/{id}/messages'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'statuses'] = opts[:'statuses'] if !opts[:'statuses'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetMessagesBySessionIdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_messages_by_session_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return counters for messaging data views.
    # @param [Hash] opts the optional parameters
    # @return [GetMessagingCountersResponse]
    def get_messaging_counters(opts = {})
      data, _status_code, _headers = get_messaging_counters_with_http_info(opts)
      data
    end

    # Return counters for messaging data views.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMessagingCountersResponse, Fixnum, Hash)>] GetMessagingCountersResponse data, response status code and response headers
    def get_messaging_counters_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_messaging_counters ...'
      end
      # resource path
      local_var_path = '/api/v2/stats/messaging/data'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetMessagingCountersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_messaging_counters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return messaging statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :by Group results by specified period: off, day, month or year. Default is off (default to off)
    # @option opts [Integer] :start Start date in unix timestamp format. Default is 7 days ago
    # @option opts [String] :_end End date in unix timestamp format. Default is now
    # @return [GetMessagingStatResponse]
    def get_messaging_stat(opts = {})
      data, _status_code, _headers = get_messaging_stat_with_http_info(opts)
      data
    end

    # Return messaging statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :by Group results by specified period: off, day, month or year. Default is off
    # @option opts [Integer] :start Start date in unix timestamp format. Default is 7 days ago
    # @option opts [String] :_end End date in unix timestamp format. Default is now
    # @return [Array<(GetMessagingStatResponse, Fixnum, Hash)>] GetMessagingStatResponse data, response status code and response headers
    def get_messaging_stat_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_messaging_stat ...'
      end
      if @api_client.config.client_side_validation && opts[:'by'] && !['off', 'day', 'month', 'year'].include?(opts[:'by'])
        fail ArgumentError, 'invalid value for "by", must be one of off, day, month, year'
      end
      # resource path
      local_var_path = '/api/v2/stats/messaging'

      # query parameters
      query_params = {}
      query_params[:'by'] = opts[:'by'] if !opts[:'by'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetMessagingStatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_messaging_stat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single message
    # Get a single outgoing message.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [MessageOut]
    def get_outbound_message(id, opts = {})
      data, _status_code, _headers = get_outbound_message_with_http_info(id, opts)
      data
    end

    # Get a single message
    # Get a single outgoing message.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageOut, Fixnum, Hash)>] MessageOut data, response status code and response headers
    def get_outbound_message_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_outbound_message ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_outbound_message"
      end
      # resource path
      local_var_path = '/api/v2/messages/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_outbound_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get history
    # Get outbound messages history.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [Integer] :last_id Filter results by ID, selecting all values lesser than the specified ID.
    # @option opts [String] :query Find message by specified search query
    # @option opts [String] :order_by Order results by some field. Default is id (default to id)
    # @option opts [String] :direction Order direction. Default is desc (default to desc)
    # @return [GetOutboundMessagesHistoryResponse]
    def get_outbound_messages_history(opts = {})
      data, _status_code, _headers = get_outbound_messages_history_with_http_info(opts)
      data
    end

    # Get history
    # Get outbound messages history.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many results to return
    # @option opts [Integer] :last_id Filter results by ID, selecting all values lesser than the specified ID.
    # @option opts [String] :query Find message by specified search query
    # @option opts [String] :order_by Order results by some field. Default is id
    # @option opts [String] :direction Order direction. Default is desc
    # @return [Array<(GetOutboundMessagesHistoryResponse, Fixnum, Hash)>] GetOutboundMessagesHistoryResponse data, response status code and response headers
    def get_outbound_messages_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_outbound_messages_history ...'
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['id', 'phone', 'sender', 'firstName', 'lastName', 'messageTime'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of id, phone, sender, firstName, lastName, messageTime'
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['asc', 'desc'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v2/history'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastId'] = opts[:'last_id'] if !opts[:'last_id'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetOutboundMessagesHistoryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_outbound_messages_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all device tokens assigned to the current account
    # @param [Hash] opts the optional parameters
    # @return [GetPushTokensResponse]
    def get_push_tokens(opts = {})
      data, _status_code, _headers = get_push_tokens_with_http_info(opts)
      data
    end

    # Get all device tokens assigned to the current account
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPushTokensResponse, Fixnum, Hash)>] GetPushTokensResponse data, response status code and response headers
    def get_push_tokens_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_push_tokens ...'
      end
      # resource path
      local_var_path = '/api/v2/push/tokens'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetPushTokensResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_push_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get message schedule.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [MessagesIcs]
    def get_scheduled_message(id, opts = {})
      data, _status_code, _headers = get_scheduled_message_with_http_info(id, opts)
      data
    end

    # Get message schedule.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessagesIcs, Fixnum, Hash)>] MessagesIcs data, response status code and response headers
    def get_scheduled_message_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_scheduled_message ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_scheduled_message"
      end
      # resource path
      local_var_path = '/api/v2/schedules/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessagesIcs')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_scheduled_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single Sender ID.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [SenderId]
    def get_sender_id(id, opts = {})
      data, _status_code, _headers = get_sender_id_with_http_info(id, opts)
      data
    end

    # Get a single Sender ID.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SenderId, Fixnum, Hash)>] SenderId data, response status code and response headers
    def get_sender_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_sender_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_sender_id"
      end
      # resource path
      local_var_path = '/api/v2/senderids/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SenderId')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_sender_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all sender IDs of current user.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @return [GetSenderIdsResponse]
    def get_sender_ids(opts = {})
      data, _status_code, _headers = get_sender_ids_with_http_info(opts)
      data
    end

    # Get all sender IDs of current user.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @return [Array<(GetSenderIdsResponse, Fixnum, Hash)>] GetSenderIdsResponse data, response status code and response headers
    def get_sender_ids_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_sender_ids ...'
      end
      # resource path
      local_var_path = '/api/v2/senderids'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSenderIdsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_sender_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current user sender settings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country Return sender settings enabled for sending to specified country. Two upper case characters
    # @return [GetSenderSettingsResponse]
    def get_sender_settings(opts = {})
      data, _status_code, _headers = get_sender_settings_with_http_info(opts)
      data
    end

    # Get current user sender settings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country Return sender settings enabled for sending to specified country. Two upper case characters
    # @return [Array<(GetSenderSettingsResponse, Fixnum, Hash)>] GetSenderSettingsResponse data, response status code and response headers
    def get_sender_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_sender_settings ...'
      end
      # resource path
      local_var_path = '/api/v2/sender/settings'

      # query parameters
      query_params = {}
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSenderSettingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_sender_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return account spending statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [Integer] :start Optional. Start date in unix timestamp format. Default is 7 days ago
    # @option opts [Integer] :_end Optional. End date in unix timestamp format. Default is now
    # @return [GetSpendingStatResponse]
    def get_spending_stat(opts = {})
      data, _status_code, _headers = get_spending_stat_with_http_info(opts)
      data
    end

    # Return account spending statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [Integer] :start Optional. Start date in unix timestamp format. Default is 7 days ago
    # @option opts [Integer] :_end Optional. End date in unix timestamp format. Default is now
    # @return [Array<(GetSpendingStatResponse, Fixnum, Hash)>] GetSpendingStatResponse data, response status code and response headers
    def get_spending_stat_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_spending_stat ...'
      end
      # resource path
      local_var_path = '/api/v2/stats/spending'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSpendingStatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_spending_stat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current entities state
    # @param [Hash] opts the optional parameters
    # @return [GetStateResponse]
    def get_state(opts = {})
      data, _status_code, _headers = get_state_with_http_info(opts)
      data
    end

    # Get current entities state
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetStateResponse, Fixnum, Hash)>] GetStateResponse data, response status code and response headers
    def get_state_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_state ...'
      end
      # resource path
      local_var_path = '/api/v2/state'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetStateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single subaccount.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_subaccount(id, opts = {})
      data, _status_code, _headers = get_subaccount_with_http_info(id, opts)
      data
    end

    # Get a single subaccount.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def get_subaccount_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_subaccount ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_subaccount"
      end
      # resource path
      local_var_path = '/api/v2/subaccounts/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_subaccount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all subaccounts of current user.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @return [User]
    def get_subaccounts(opts = {})
      data, _status_code, _headers = get_subaccounts_with_http_info(opts)
      data
    end

    # Get all subaccounts of current user.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def get_subaccounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_subaccounts ...'
      end
      # resource path
      local_var_path = '/api/v2/subaccounts'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_subaccounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all subaccounts with their REST API tokens associated with specified app name.
    # When more than one token related to app name, last key will be returned.
    # @param get_subaccounts_with_tokens_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [GetSubaccountsWithTokensResponse]
    def get_subaccounts_with_tokens(get_subaccounts_with_tokens_input_object, opts = {})
      data, _status_code, _headers = get_subaccounts_with_tokens_with_http_info(get_subaccounts_with_tokens_input_object, opts)
      data
    end

    # Get all subaccounts with their REST API tokens associated with specified app name.
    # When more than one token related to app name, last key will be returned.
    # @param get_subaccounts_with_tokens_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(GetSubaccountsWithTokensResponse, Fixnum, Hash)>] GetSubaccountsWithTokensResponse data, response status code and response headers
    def get_subaccounts_with_tokens_with_http_info(get_subaccounts_with_tokens_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_subaccounts_with_tokens ...'
      end
      # verify the required parameter 'get_subaccounts_with_tokens_input_object' is set
      if @api_client.config.client_side_validation && get_subaccounts_with_tokens_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'get_subaccounts_with_tokens_input_object' when calling TextMagicApi.get_subaccounts_with_tokens"
      end
      # resource path
      local_var_path = '/api/v2/subaccounts/tokens/list'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_subaccounts_with_tokens_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSubaccountsWithTokensResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_subaccounts_with_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a survey by id.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Survey]
    def get_survey(id, opts = {})
      data, _status_code, _headers = get_survey_with_http_info(id, opts)
      data
    end

    # Get a survey by id.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Survey, Fixnum, Hash)>] Survey data, response status code and response headers
    def get_survey_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_survey ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_survey"
      end
      # resource path
      local_var_path = '/api/v2/surveys/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Survey')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a node by id.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [SurveyNode]
    def get_survey_node(id, opts = {})
      data, _status_code, _headers = get_survey_node_with_http_info(id, opts)
      data
    end

    # Get a node by id.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SurveyNode, Fixnum, Hash)>] SurveyNode data, response status code and response headers
    def get_survey_node_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_survey_node ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_survey_node"
      end
      # resource path
      local_var_path = '/api/v2/surveys/nodes/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_survey_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch nodes by given survey id.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [GetSurveyNodesResponse]
    def get_survey_nodes(id, opts = {})
      data, _status_code, _headers = get_survey_nodes_with_http_info(id, opts)
      data
    end

    # Fetch nodes by given survey id.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSurveyNodesResponse, Fixnum, Hash)>] GetSurveyNodesResponse data, response status code and response headers
    def get_survey_nodes_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_survey_nodes ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_survey_nodes"
      end
      # resource path
      local_var_path = '/api/v2/surveys/{id}/nodes'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSurveyNodesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_survey_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all user surveys.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @return [GetSurveysResponse]
    def get_surveys(opts = {})
      data, _status_code, _headers = get_surveys_with_http_info(opts)
      data
    end

    # Get all user surveys.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @return [Array<(GetSurveysResponse, Fixnum, Hash)>] GetSurveysResponse data, response status code and response headers
    def get_surveys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_surveys ...'
      end
      # resource path
      local_var_path = '/api/v2/surveys'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSurveysResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_surveys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single template.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [MessageTemplate]
    def get_template(id, opts = {})
      data, _status_code, _headers = get_template_with_http_info(id, opts)
      data
    end

    # Get a single template.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageTemplate, Fixnum, Hash)>] MessageTemplate data, response status code and response headers
    def get_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_template ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_template"
      end
      # resource path
      local_var_path = '/api/v2/templates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all available timezone IDs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :full Return full info about timezones in array (0 or 1). Default is 0 (default to 0)
    # @return [Object]
    def get_timezones(opts = {})
      data, _status_code, _headers = get_timezones_with_http_info(opts)
      data
    end

    # Return all available timezone IDs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :full Return full info about timezones in array (0 or 1). Default is 0
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_timezones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_timezones ...'
      end
      # resource path
      local_var_path = '/api/v2/timezones'

      # query parameters
      query_params = {}
      query_params[:'full'] = opts[:'full'] if !opts[:'full'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_timezones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get total amount of unread messages in the current user chats.
    # @param [Hash] opts the optional parameters
    # @return [GetUnreadMessagesTotalResponse]
    def get_unread_messages_total(opts = {})
      data, _status_code, _headers = get_unread_messages_total_with_http_info(opts)
      data
    end

    # Get total amount of unread messages in the current user chats.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUnreadMessagesTotalResponse, Fixnum, Hash)>] GetUnreadMessagesTotalResponse data, response status code and response headers
    def get_unread_messages_total_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_unread_messages_total ...'
      end
      # resource path
      local_var_path = '/api/v2/chats/unread/count'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetUnreadMessagesTotalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_unread_messages_total\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single unsubscribed contact.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [UnsubscribedContact]
    def get_unsubscribed_contact(id, opts = {})
      data, _status_code, _headers = get_unsubscribed_contact_with_http_info(id, opts)
      data
    end

    # Get a single unsubscribed contact.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnsubscribedContact, Fixnum, Hash)>] UnsubscribedContact data, response status code and response headers
    def get_unsubscribed_contact_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_unsubscribed_contact ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.get_unsubscribed_contact"
      end
      # resource path
      local_var_path = '/api/v2/unsubscribers/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnsubscribedContact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_unsubscribed_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all contact have unsubscribed from your communication.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @return [GetUnsubscribersResponse]
    def get_unsubscribers(opts = {})
      data, _status_code, _headers = get_unsubscribers_with_http_info(opts)
      data
    end

    # Get all contact have unsubscribed from your communication.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @return [Array<(GetUnsubscribersResponse, Fixnum, Hash)>] GetUnsubscribersResponse data, response status code and response headers
    def get_unsubscribers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_unsubscribers ...'
      end
      # resource path
      local_var_path = '/api/v2/unsubscribers'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetUnsubscribersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_unsubscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user's dedicated numbers.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [Integer] :survey_id Fetch only that numbers which are ready for the survey
    # @return [GetUserDedicatedNumbersResponse]
    def get_user_dedicated_numbers(opts = {})
      data, _status_code, _headers = get_user_dedicated_numbers_with_http_info(opts)
      data
    end

    # Get user&#39;s dedicated numbers.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [Integer] :survey_id Fetch only that numbers which are ready for the survey
    # @return [Array<(GetUserDedicatedNumbersResponse, Fixnum, Hash)>] GetUserDedicatedNumbersResponse data, response status code and response headers
    def get_user_dedicated_numbers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_user_dedicated_numbers ...'
      end
      # resource path
      local_var_path = '/api/v2/numbers'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'surveyId'] = opts[:'survey_id'] if !opts[:'survey_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetUserDedicatedNumbersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_user_dedicated_numbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all user lists.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :order_by Order results by some field. Default is id (default to id)
    # @option opts [String] :direction Order direction. Default is desc (default to desc)
    # @option opts [Integer] :favorite_only Return only favorite lists (default to 0)
    # @option opts [Integer] :only_mine Return only current user lists (default to 0)
    # @return [GetUserListsResponse]
    def get_user_lists(opts = {})
      data, _status_code, _headers = get_user_lists_with_http_info(opts)
      data
    end

    # Get all user lists.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :order_by Order results by some field. Default is id
    # @option opts [String] :direction Order direction. Default is desc
    # @option opts [Integer] :favorite_only Return only favorite lists
    # @option opts [Integer] :only_mine Return only current user lists
    # @return [Array<(GetUserListsResponse, Fixnum, Hash)>] GetUserListsResponse data, response status code and response headers
    def get_user_lists_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_user_lists ...'
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['id', 'firstName', 'lastName'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of id, firstName, lastName'
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['asc', 'desc'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v2/lists'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'favoriteOnly'] = opts[:'favorite_only'] if !opts[:'favorite_only'].nil?
      query_params[:'onlyMine'] = opts[:'only_mine'] if !opts[:'only_mine'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetUserListsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_user_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get minimal valid apps versions
    # @param [Hash] opts the optional parameters
    # @return [GetVersionsResponse]
    def get_versions(opts = {})
      data, _status_code, _headers = get_versions_with_http_info(opts)
      data
    end

    # Get minimal valid apps versions
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetVersionsResponse, Fixnum, Hash)>] GetVersionsResponse data, response status code and response headers
    def get_versions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.get_versions ...'
      end
      # resource path
      local_var_path = '/api/v2/versions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetVersionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#get_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invite new subaccount.
    # @param invite_subaccount_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def invite_subaccount(invite_subaccount_input_object, opts = {})
      invite_subaccount_with_http_info(invite_subaccount_input_object, opts)
      nil
    end

    # Invite new subaccount.
    # @param invite_subaccount_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def invite_subaccount_with_http_info(invite_subaccount_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.invite_subaccount ...'
      end
      # verify the required parameter 'invite_subaccount_input_object' is set
      if @api_client.config.client_side_validation && invite_subaccount_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'invite_subaccount_input_object' when calling TextMagicApi.invite_subaccount"
      end
      # resource path
      local_var_path = '/api/v2/subaccounts'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(invite_subaccount_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#invite_subaccount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark several chats as read by chat ids or mark all chats as read
    # @param mark_chats_read_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def mark_chats_read_bulk(mark_chats_read_bulk_input_object, opts = {})
      mark_chats_read_bulk_with_http_info(mark_chats_read_bulk_input_object, opts)
      nil
    end

    # Mark several chats as read by chat ids or mark all chats as read
    # @param mark_chats_read_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def mark_chats_read_bulk_with_http_info(mark_chats_read_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.mark_chats_read_bulk ...'
      end
      # verify the required parameter 'mark_chats_read_bulk_input_object' is set
      if @api_client.config.client_side_validation && mark_chats_read_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'mark_chats_read_bulk_input_object' when calling TextMagicApi.mark_chats_read_bulk"
      end
      # resource path
      local_var_path = '/api/v2/chats/read/bulk'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mark_chats_read_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#mark_chats_read_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark several chats as UNread by chat ids or mark all chats as UNread
    # @param mark_chats_unread_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def mark_chats_unread_bulk(mark_chats_unread_bulk_input_object, opts = {})
      mark_chats_unread_bulk_with_http_info(mark_chats_unread_bulk_input_object, opts)
      nil
    end

    # Mark several chats as UNread by chat ids or mark all chats as UNread
    # @param mark_chats_unread_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def mark_chats_unread_bulk_with_http_info(mark_chats_unread_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.mark_chats_unread_bulk ...'
      end
      # verify the required parameter 'mark_chats_unread_bulk_input_object' is set
      if @api_client.config.client_side_validation && mark_chats_unread_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'mark_chats_unread_bulk_input_object' when calling TextMagicApi.mark_chats_unread_bulk"
      end
      # resource path
      local_var_path = '/api/v2/chats/unread/bulk'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mark_chats_unread_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#mark_chats_unread_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Merge two question nodes.
    # @param merge_survey_nodes_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def merge_survey_nodes(merge_survey_nodes_input_object, opts = {})
      merge_survey_nodes_with_http_info(merge_survey_nodes_input_object, opts)
      nil
    end

    # Merge two question nodes.
    # @param merge_survey_nodes_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def merge_survey_nodes_with_http_info(merge_survey_nodes_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.merge_survey_nodes ...'
      end
      # verify the required parameter 'merge_survey_nodes_input_object' is set
      if @api_client.config.client_side_validation && merge_survey_nodes_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'merge_survey_nodes_input_object' when calling TextMagicApi.merge_survey_nodes"
      end
      # resource path
      local_var_path = '/api/v2/surveys/nodes/merge'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(merge_survey_nodes_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#merge_survey_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set mute mode.
    # @param mute_chat_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def mute_chat(mute_chat_input_object, opts = {})
      data, _status_code, _headers = mute_chat_with_http_info(mute_chat_input_object, opts)
      data
    end

    # Set mute mode.
    # @param mute_chat_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def mute_chat_with_http_info(mute_chat_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.mute_chat ...'
      end
      # verify the required parameter 'mute_chat_input_object' is set
      if @api_client.config.client_side_validation && mute_chat_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'mute_chat_input_object' when calling TextMagicApi.mute_chat"
      end
      # resource path
      local_var_path = '/api/v2/chats/mute'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mute_chat_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#mute_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mute several chats by chat ids or mute all chats
    # @param mute_chats_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def mute_chats_bulk(mute_chats_bulk_input_object, opts = {})
      mute_chats_bulk_with_http_info(mute_chats_bulk_input_object, opts)
      nil
    end

    # Mute several chats by chat ids or mute all chats
    # @param mute_chats_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def mute_chats_bulk_with_http_info(mute_chats_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.mute_chats_bulk ...'
      end
      # verify the required parameter 'mute_chats_bulk_input_object' is set
      if @api_client.config.client_side_validation && mute_chats_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'mute_chats_bulk_input_object' when calling TextMagicApi.mute_chats_bulk"
      end
      # resource path
      local_var_path = '/api/v2/chats/mute/bulk'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mute_chats_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#mute_chats_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Just does a pong.
    # @param [Hash] opts the optional parameters
    # @return [PingResponse]
    def ping(opts = {})
      data, _status_code, _headers = ping_with_http_info(opts)
      data
    end

    # Just does a pong.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PingResponse, Fixnum, Hash)>] PingResponse data, response status code and response headers
    def ping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.ping ...'
      end
      # resource path
      local_var_path = '/api/v2/ping'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#ping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reopen chats by chat ids or reopen all chats
    # @param reopen_chats_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def reopen_chats_bulk(reopen_chats_bulk_input_object, opts = {})
      reopen_chats_bulk_with_http_info(reopen_chats_bulk_input_object, opts)
      nil
    end

    # Reopen chats by chat ids or reopen all chats
    # @param reopen_chats_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reopen_chats_bulk_with_http_info(reopen_chats_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.reopen_chats_bulk ...'
      end
      # verify the required parameter 'reopen_chats_bulk_input_object' is set
      if @api_client.config.client_side_validation && reopen_chats_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'reopen_chats_bulk_input_object' when calling TextMagicApi.reopen_chats_bulk"
      end
      # resource path
      local_var_path = '/api/v2/chats/reopen/bulk'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reopen_chats_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#reopen_chats_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request a new REST API token for subaccount.
    # Returning user object, key and app name.
    # @param request_new_subaccount_token_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [User]
    def request_new_subaccount_token(request_new_subaccount_token_input_object, opts = {})
      data, _status_code, _headers = request_new_subaccount_token_with_http_info(request_new_subaccount_token_input_object, opts)
      data
    end

    # Request a new REST API token for subaccount.
    # Returning user object, key and app name.
    # @param request_new_subaccount_token_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def request_new_subaccount_token_with_http_info(request_new_subaccount_token_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.request_new_subaccount_token ...'
      end
      # verify the required parameter 'request_new_subaccount_token_input_object' is set
      if @api_client.config.client_side_validation && request_new_subaccount_token_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'request_new_subaccount_token_input_object' when calling TextMagicApi.request_new_subaccount_token"
      end
      # resource path
      local_var_path = '/api/v2/subaccounts/tokens'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request_new_subaccount_token_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#request_new_subaccount_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request for a new Sender ID.
    # @param request_sender_id_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def request_sender_id(request_sender_id_input_object, opts = {})
      data, _status_code, _headers = request_sender_id_with_http_info(request_sender_id_input_object, opts)
      data
    end

    # Request for a new Sender ID.
    # @param request_sender_id_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def request_sender_id_with_http_info(request_sender_id_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.request_sender_id ...'
      end
      # verify the required parameter 'request_sender_id_input_object' is set
      if @api_client.config.client_side_validation && request_sender_id_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'request_sender_id_input_object' when calling TextMagicApi.request_sender_id"
      end
      # resource path
      local_var_path = '/api/v2/senderids'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request_sender_id_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#request_sender_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset a survey flow.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [ResourceLinkResponse]
    def reset_survey(id, opts = {})
      data, _status_code, _headers = reset_survey_with_http_info(id, opts)
      data
    end

    # Reset a survey flow.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def reset_survey_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.reset_survey ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.reset_survey"
      end
      # resource path
      local_var_path = '/api/v2/surveys/{id}/reset'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#reset_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find chats by inbound or outbound messages text.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :query Find chats by specified search query
    # @return [SearchChatsResponse]
    def search_chats(opts = {})
      data, _status_code, _headers = search_chats_with_http_info(opts)
      data
    end

    # Find chats by inbound or outbound messages text.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :query Find chats by specified search query
    # @return [Array<(SearchChatsResponse, Fixnum, Hash)>] SearchChatsResponse data, response status code and response headers
    def search_chats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.search_chats ...'
      end
      # resource path
      local_var_path = '/api/v2/chats/search'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchChatsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#search_chats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find chats by IDs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :ids Find chats by ID(s)
    # @return [SearchChatsByIdsResponse]
    def search_chats_by_ids(opts = {})
      data, _status_code, _headers = search_chats_by_ids_with_http_info(opts)
      data
    end

    # Find chats by IDs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :ids Find chats by ID(s)
    # @return [Array<(SearchChatsByIdsResponse, Fixnum, Hash)>] SearchChatsByIdsResponse data, response status code and response headers
    def search_chats_by_ids_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.search_chats_by_ids ...'
      end
      if @api_client.config.client_side_validation && !opts[:'ids'].nil? && opts[:'ids'] !~ Regexp.new(/[,\\d]+/)
        fail ArgumentError, "invalid value for 'opts[:\"ids\"]' when calling TextMagicApi.search_chats_by_ids, must conform to the pattern /[,\\d]+/."
      end

      # resource path
      local_var_path = '/api/v2/chats/search/ids'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchChatsByIdsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#search_chats_by_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find chats by recipient (contact, list name or phone number).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :query Find chats by specified search query
    # @option opts [String] :order_by Order results by some field. Default is id (default to id)
    # @return [SearchChatsByReceipentResponse]
    def search_chats_by_receipent(opts = {})
      data, _status_code, _headers = search_chats_by_receipent_with_http_info(opts)
      data
    end

    # Find chats by recipient (contact, list name or phone number).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :query Find chats by specified search query
    # @option opts [String] :order_by Order results by some field. Default is id
    # @return [Array<(SearchChatsByReceipentResponse, Fixnum, Hash)>] SearchChatsByReceipentResponse data, response status code and response headers
    def search_chats_by_receipent_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.search_chats_by_receipent ...'
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['id', 'unread', 'messageTime'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of id, unread, messageTime'
      end
      # resource path
      local_var_path = '/api/v2/chats/search/recipients'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchChatsByReceipentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#search_chats_by_receipent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find user contacts by given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [Integer] :shared Should shared contacts to be included (default to 0)
    # @option opts [String] :ids Find contact by ID(s)
    # @option opts [Integer] :list_id Find contact by List ID
    # @option opts [Integer] :include_blocked Should blocked contacts to be included
    # @option opts [String] :query Find contacts by specified search query
    # @option opts [Integer] :local Treat phone number passed in &#39;query&#39; field as local. Default is 0 (default to 0)
    # @option opts [String] :country 2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country
    # @option opts [String] :order_by Order results by some field. Default is id (default to id)
    # @option opts [String] :direction Order direction. Default is desc (default to desc)
    # @return [SearchContactsResponse]
    def search_contacts(opts = {})
      data, _status_code, _headers = search_contacts_with_http_info(opts)
      data
    end

    # Find user contacts by given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [Integer] :shared Should shared contacts to be included
    # @option opts [String] :ids Find contact by ID(s)
    # @option opts [Integer] :list_id Find contact by List ID
    # @option opts [Integer] :include_blocked Should blocked contacts to be included
    # @option opts [String] :query Find contacts by specified search query
    # @option opts [Integer] :local Treat phone number passed in &#39;query&#39; field as local. Default is 0
    # @option opts [String] :country 2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country
    # @option opts [String] :order_by Order results by some field. Default is id
    # @option opts [String] :direction Order direction. Default is desc
    # @return [Array<(SearchContactsResponse, Fixnum, Hash)>] SearchContactsResponse data, response status code and response headers
    def search_contacts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.search_contacts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'ids'].nil? && opts[:'ids'] !~ Regexp.new(/[,\\d]+/)
        fail ArgumentError, "invalid value for 'opts[:\"ids\"]' when calling TextMagicApi.search_contacts, must conform to the pattern /[,\\d]+/."
      end

      if @api_client.config.client_side_validation && opts[:'order_by'] && !['id', 'firstName', 'lastName'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of id, firstName, lastName'
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['asc', 'desc'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v2/contacts/search'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'shared'] = opts[:'shared'] if !opts[:'shared'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'listId'] = opts[:'list_id'] if !opts[:'list_id'].nil?
      query_params[:'includeBlocked'] = opts[:'include_blocked'] if !opts[:'include_blocked'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'local'] = opts[:'local'] if !opts[:'local'].nil?
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchContactsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#search_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find inbound messages by given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :ids Find message by ID(s)
    # @option opts [String] :query Find recipients by specified search query
    # @option opts [String] :order_by Order results by some field. Default is id (default to id)
    # @option opts [String] :direction Order direction. Default is desc (default to desc)
    # @option opts [Integer] :expand Expand by adding firstName, lastName and contactId (default to 0)
    # @return [SearchInboundMessagesResponse]
    def search_inbound_messages(opts = {})
      data, _status_code, _headers = search_inbound_messages_with_http_info(opts)
      data
    end

    # Find inbound messages by given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :ids Find message by ID(s)
    # @option opts [String] :query Find recipients by specified search query
    # @option opts [String] :order_by Order results by some field. Default is id
    # @option opts [String] :direction Order direction. Default is desc
    # @option opts [Integer] :expand Expand by adding firstName, lastName and contactId
    # @return [Array<(SearchInboundMessagesResponse, Fixnum, Hash)>] SearchInboundMessagesResponse data, response status code and response headers
    def search_inbound_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.search_inbound_messages ...'
      end
      if @api_client.config.client_side_validation && !opts[:'ids'].nil? && opts[:'ids'] !~ Regexp.new(/[,\\d]+/)
        fail ArgumentError, "invalid value for 'opts[:\"ids\"]' when calling TextMagicApi.search_inbound_messages, must conform to the pattern /[,\\d]+/."
      end

      if @api_client.config.client_side_validation && opts[:'order_by'] && !['id', 'sender', 'receiver', 'messageTime', 'firstName', 'lastName'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of id, sender, receiver, messageTime, firstName, lastName'
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['asc', 'desc'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v2/replies/search'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchInboundMessagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#search_inbound_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find contact lists by given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :ids Find lists by ID(s)
    # @option opts [String] :query Find lists by specified search query
    # @option opts [Integer] :only_mine Return only current user lists (default to 0)
    # @option opts [Integer] :only_default Return only default lists (default to 0)
    # @option opts [String] :order_by Order results by some field. Default is id (default to id)
    # @option opts [String] :direction Order direction. Default is desc (default to desc)
    # @return [SearchListsResponse]
    def search_lists(opts = {})
      data, _status_code, _headers = search_lists_with_http_info(opts)
      data
    end

    # Find contact lists by given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :ids Find lists by ID(s)
    # @option opts [String] :query Find lists by specified search query
    # @option opts [Integer] :only_mine Return only current user lists
    # @option opts [Integer] :only_default Return only default lists
    # @option opts [String] :order_by Order results by some field. Default is id
    # @option opts [String] :direction Order direction. Default is desc
    # @return [Array<(SearchListsResponse, Fixnum, Hash)>] SearchListsResponse data, response status code and response headers
    def search_lists_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.search_lists ...'
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['id', 'firstName', 'lastName'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of id, firstName, lastName'
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['asc', 'desc'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v2/lists/search'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'onlyMine'] = opts[:'only_mine'] if !opts[:'only_mine'].nil?
      query_params[:'onlyDefault'] = opts[:'only_default'] if !opts[:'only_default'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchListsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#search_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find messages
    # Find outbound messages by given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [Integer] :last_id Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified
    # @option opts [String] :ids Find message by ID(s)
    # @option opts [Integer] :session_id Find messages by session ID
    # @option opts [String] :statuses Find messages by status
    # @option opts [Integer] :include_deleted Search also in deleted messages (default to 0)
    # @option opts [String] :query Find messages by specified search query
    # @return [SearchOutboundMessagesResponse]
    def search_outbound_messages(opts = {})
      data, _status_code, _headers = search_outbound_messages_with_http_info(opts)
      data
    end

    # Find messages
    # Find outbound messages by given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [Integer] :last_id Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified
    # @option opts [String] :ids Find message by ID(s)
    # @option opts [Integer] :session_id Find messages by session ID
    # @option opts [String] :statuses Find messages by status
    # @option opts [Integer] :include_deleted Search also in deleted messages
    # @option opts [String] :query Find messages by specified search query
    # @return [Array<(SearchOutboundMessagesResponse, Fixnum, Hash)>] SearchOutboundMessagesResponse data, response status code and response headers
    def search_outbound_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.search_outbound_messages ...'
      end
      if @api_client.config.client_side_validation && !opts[:'ids'].nil? && opts[:'ids'] !~ Regexp.new(/[,\\d]+/)
        fail ArgumentError, "invalid value for 'opts[:\"ids\"]' when calling TextMagicApi.search_outbound_messages, must conform to the pattern /[,\\d]+/."
      end

      if @api_client.config.client_side_validation && opts[:'statuses'] && !['q', 's', 'e', 'r', 'a', 'd', 'b', 'f', 'u', 'j', 'i', 'p', 'h'].include?(opts[:'statuses'])
        fail ArgumentError, 'invalid value for "statuses", must be one of q, s, e, r, a, d, b, f, u, j, i, p, h'
      end
      # resource path
      local_var_path = '/api/v2/messages/search'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastId'] = opts[:'last_id'] if !opts[:'last_id'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'sessionId'] = opts[:'session_id'] if !opts[:'session_id'].nil?
      query_params[:'statuses'] = opts[:'statuses'] if !opts[:'statuses'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchOutboundMessagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#search_outbound_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find scheduled messages by given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :query Find messages by specified search query
    # @option opts [String] :ids Find schedules by ID(s)
    # @option opts [String] :status Fetch schedules with the specific status: a - actual, c - completed, x - all (default to x)
    # @option opts [String] :order_by Order results by some field. Default is id (default to id)
    # @option opts [String] :direction Order direction. Default is desc (default to desc)
    # @return [SearchScheduledMessagesResponse]
    def search_scheduled_messages(opts = {})
      data, _status_code, _headers = search_scheduled_messages_with_http_info(opts)
      data
    end

    # Find scheduled messages by given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :query Find messages by specified search query
    # @option opts [String] :ids Find schedules by ID(s)
    # @option opts [String] :status Fetch schedules with the specific status: a - actual, c - completed, x - all
    # @option opts [String] :order_by Order results by some field. Default is id
    # @option opts [String] :direction Order direction. Default is desc
    # @return [Array<(SearchScheduledMessagesResponse, Fixnum, Hash)>] SearchScheduledMessagesResponse data, response status code and response headers
    def search_scheduled_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.search_scheduled_messages ...'
      end
      if @api_client.config.client_side_validation && !opts[:'ids'].nil? && opts[:'ids'] !~ Regexp.new(/[,\\d]+/)
        fail ArgumentError, "invalid value for 'opts[:\"ids\"]' when calling TextMagicApi.search_scheduled_messages, must conform to the pattern /[,\\d]+/."
      end

      if @api_client.config.client_side_validation && opts[:'status'] && !['x', 'a', 'c'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of x, a, c'
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['id', 'nextSend', 'lastSend'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of id, nextSend, lastSend'
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['asc', 'desc'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v2/schedules/search'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchScheduledMessagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#search_scheduled_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find user templates by given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page (default to 1)
    # @option opts [Integer] :limit How many results to return (default to 10)
    # @option opts [String] :ids Find template by ID(s)
    # @option opts [String] :name Find template by name
    # @option opts [String] :content Find template by content
    # @return [SearchTemplatesResponse]
    def search_templates(opts = {})
      data, _status_code, _headers = search_templates_with_http_info(opts)
      data
    end

    # Find user templates by given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Fetch specified results page
    # @option opts [Integer] :limit How many results to return
    # @option opts [String] :ids Find template by ID(s)
    # @option opts [String] :name Find template by name
    # @option opts [String] :content Find template by content
    # @return [Array<(SearchTemplatesResponse, Fixnum, Hash)>] SearchTemplatesResponse data, response status code and response headers
    def search_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.search_templates ...'
      end
      # resource path
      local_var_path = '/api/v2/templates/search'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchTemplatesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#search_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send user email verification
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def send_email_verification_code(opts = {})
      send_email_verification_code_with_http_info(opts)
      nil
    end

    # Send user email verification
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def send_email_verification_code_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.send_email_verification_code ...'
      end
      # resource path
      local_var_path = '/api/v2/user/email/verification'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#send_email_verification_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send message
    # The main entrypoint to send messages. See examples above for the reference.
    # @param send_message_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [SendMessageResponse]
    def send_message(send_message_input_object, opts = {})
      data, _status_code, _headers = send_message_with_http_info(send_message_input_object, opts)
      data
    end

    # Send message
    # The main entrypoint to send messages. See examples above for the reference.
    # @param send_message_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(SendMessageResponse, Fixnum, Hash)>] SendMessageResponse data, response status code and response headers
    def send_message_with_http_info(send_message_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.send_message ...'
      end
      # verify the required parameter 'send_message_input_object' is set
      if @api_client.config.client_side_validation && send_message_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'send_message_input_object' when calling TextMagicApi.send_message"
      end
      # resource path
      local_var_path = '/api/v2/messages'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(send_message_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SendMessageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#send_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send user phone verification
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def send_phone_verification_code(opts = {})
      send_phone_verification_code_with_http_info(opts)
      nil
    end

    # Send user phone verification
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def send_phone_verification_code_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.send_phone_verification_code ...'
      end
      # resource path
      local_var_path = '/api/v2/user/phone/verification'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#send_phone_verification_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set status of the chat given by ID.
    # @param set_chat_status_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def set_chat_status(set_chat_status_input_object, opts = {})
      data, _status_code, _headers = set_chat_status_with_http_info(set_chat_status_input_object, opts)
      data
    end

    # Set status of the chat given by ID.
    # @param set_chat_status_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def set_chat_status_with_http_info(set_chat_status_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.set_chat_status ...'
      end
      # verify the required parameter 'set_chat_status_input_object' is set
      if @api_client.config.client_side_validation && set_chat_status_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'set_chat_status_input_object' when calling TextMagicApi.set_chat_status"
      end
      # resource path
      local_var_path = '/api/v2/chats/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(set_chat_status_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#set_chat_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Start a survey.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [ResourceLinkResponse]
    def start_survey(id, opts = {})
      data, _status_code, _headers = start_survey_with_http_info(id, opts)
      data
    end

    # Start a survey.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def start_survey_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.start_survey ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.start_survey"
      end
      # resource path
      local_var_path = '/api/v2/surveys/{id}/start'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#start_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unblock contact by phone number.
    # @param unblock_contact_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def unblock_contact(unblock_contact_input_object, opts = {})
      unblock_contact_with_http_info(unblock_contact_input_object, opts)
      nil
    end

    # Unblock contact by phone number.
    # @param unblock_contact_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def unblock_contact_with_http_info(unblock_contact_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.unblock_contact ...'
      end
      # verify the required parameter 'unblock_contact_input_object' is set
      if @api_client.config.client_side_validation && unblock_contact_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'unblock_contact_input_object' when calling TextMagicApi.unblock_contact"
      end
      # resource path
      local_var_path = '/api/v2/contacts/unblock'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(unblock_contact_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#unblock_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unblock several contacts by blocked contact ids or unblock all contacts
    # @param unblock_contacts_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def unblock_contacts_bulk(unblock_contacts_bulk_input_object, opts = {})
      unblock_contacts_bulk_with_http_info(unblock_contacts_bulk_input_object, opts)
      nil
    end

    # Unblock several contacts by blocked contact ids or unblock all contacts
    # @param unblock_contacts_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def unblock_contacts_bulk_with_http_info(unblock_contacts_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.unblock_contacts_bulk ...'
      end
      # verify the required parameter 'unblock_contacts_bulk_input_object' is set
      if @api_client.config.client_side_validation && unblock_contacts_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'unblock_contacts_bulk_input_object' when calling TextMagicApi.unblock_contacts_bulk"
      end
      # resource path
      local_var_path = '/api/v2/contacts/unblock/bulk'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(unblock_contacts_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#unblock_contacts_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unmute several chats by chat ids or unmute all chats
    # @param unmute_chats_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def unmute_chats_bulk(unmute_chats_bulk_input_object, opts = {})
      unmute_chats_bulk_with_http_info(unmute_chats_bulk_input_object, opts)
      nil
    end

    # Unmute several chats by chat ids or unmute all chats
    # @param unmute_chats_bulk_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def unmute_chats_bulk_with_http_info(unmute_chats_bulk_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.unmute_chats_bulk ...'
      end
      # verify the required parameter 'unmute_chats_bulk_input_object' is set
      if @api_client.config.client_side_validation && unmute_chats_bulk_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'unmute_chats_bulk_input_object' when calling TextMagicApi.unmute_chats_bulk"
      end
      # resource path
      local_var_path = '/api/v2/chats/unmute/bulk'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(unmute_chats_bulk_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#unmute_chats_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unsubscribe contact from your communication by phone number.
    # @param unsubscribe_contact_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def unsubscribe_contact(unsubscribe_contact_input_object, opts = {})
      data, _status_code, _headers = unsubscribe_contact_with_http_info(unsubscribe_contact_input_object, opts)
      data
    end

    # Unsubscribe contact from your communication by phone number.
    # @param unsubscribe_contact_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def unsubscribe_contact_with_http_info(unsubscribe_contact_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.unsubscribe_contact ...'
      end
      # verify the required parameter 'unsubscribe_contact_input_object' is set
      if @api_client.config.client_side_validation && unsubscribe_contact_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'unsubscribe_contact_input_object' when calling TextMagicApi.unsubscribe_contact"
      end
      # resource path
      local_var_path = '/api/v2/unsubscribers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(unsubscribe_contact_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#unsubscribe_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update balance notification settings
    # @param update_balance_notification_settings_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def update_balance_notification_settings(update_balance_notification_settings_input_object, opts = {})
      update_balance_notification_settings_with_http_info(update_balance_notification_settings_input_object, opts)
      nil
    end

    # Update balance notification settings
    # @param update_balance_notification_settings_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_balance_notification_settings_with_http_info(update_balance_notification_settings_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_balance_notification_settings ...'
      end
      # verify the required parameter 'update_balance_notification_settings_input_object' is set
      if @api_client.config.client_side_validation && update_balance_notification_settings_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_balance_notification_settings_input_object' when calling TextMagicApi.update_balance_notification_settings"
      end
      # resource path
      local_var_path = '/api/v2/user/notification/balance'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_balance_notification_settings_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_balance_notification_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update callback URL settings
    # @param update_callback_settings_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def update_callback_settings(update_callback_settings_input_object, opts = {})
      update_callback_settings_with_http_info(update_callback_settings_input_object, opts)
      nil
    end

    # Update callback URL settings
    # @param update_callback_settings_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_callback_settings_with_http_info(update_callback_settings_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_callback_settings ...'
      end
      # verify the required parameter 'update_callback_settings_input_object' is set
      if @api_client.config.client_side_validation && update_callback_settings_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_callback_settings_input_object' when calling TextMagicApi.update_callback_settings"
      end
      # resource path
      local_var_path = '/api/v2/callback/settings'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_callback_settings_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_callback_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update chat desktop notification settings
    # @param update_chat_desktop_notification_settings_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def update_chat_desktop_notification_settings(update_chat_desktop_notification_settings_input_object, opts = {})
      update_chat_desktop_notification_settings_with_http_info(update_chat_desktop_notification_settings_input_object, opts)
      nil
    end

    # Update chat desktop notification settings
    # @param update_chat_desktop_notification_settings_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_chat_desktop_notification_settings_with_http_info(update_chat_desktop_notification_settings_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_chat_desktop_notification_settings ...'
      end
      # verify the required parameter 'update_chat_desktop_notification_settings_input_object' is set
      if @api_client.config.client_side_validation && update_chat_desktop_notification_settings_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_chat_desktop_notification_settings_input_object' when calling TextMagicApi.update_chat_desktop_notification_settings"
      end
      # resource path
      local_var_path = '/api/v2/user/desktop/notification'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_chat_desktop_notification_settings_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_chat_desktop_notification_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update existing contact.
    # @param update_contact_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def update_contact(update_contact_input_object, id, opts = {})
      data, _status_code, _headers = update_contact_with_http_info(update_contact_input_object, id, opts)
      data
    end

    # Update existing contact.
    # @param update_contact_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def update_contact_with_http_info(update_contact_input_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_contact ...'
      end
      # verify the required parameter 'update_contact_input_object' is set
      if @api_client.config.client_side_validation && update_contact_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_contact_input_object' when calling TextMagicApi.update_contact"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.update_contact"
      end
      # resource path
      local_var_path = '/api/v2/contacts/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_contact_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update existing contact note.
    # @param update_contact_note_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def update_contact_note(update_contact_note_input_object, id, opts = {})
      data, _status_code, _headers = update_contact_note_with_http_info(update_contact_note_input_object, id, opts)
      data
    end

    # Update existing contact note.
    # @param update_contact_note_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def update_contact_note_with_http_info(update_contact_note_input_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_contact_note ...'
      end
      # verify the required parameter 'update_contact_note_input_object' is set
      if @api_client.config.client_side_validation && update_contact_note_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_contact_note_input_object' when calling TextMagicApi.update_contact_note"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.update_contact_note"
      end
      # resource path
      local_var_path = '/api/v2/notes/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_contact_note_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_contact_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update current user info.
    # @param update_current_user_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [UpdateCurrentUserResponse]
    def update_current_user(update_current_user_input_object, opts = {})
      data, _status_code, _headers = update_current_user_with_http_info(update_current_user_input_object, opts)
      data
    end

    # Update current user info.
    # @param update_current_user_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(UpdateCurrentUserResponse, Fixnum, Hash)>] UpdateCurrentUserResponse data, response status code and response headers
    def update_current_user_with_http_info(update_current_user_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_current_user ...'
      end
      # verify the required parameter 'update_current_user_input_object' is set
      if @api_client.config.client_side_validation && update_current_user_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_current_user_input_object' when calling TextMagicApi.update_current_user"
      end
      # resource path
      local_var_path = '/api/v2/user'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_current_user_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdateCurrentUserResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_current_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update existing custom field.
    # @param update_custom_field_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def update_custom_field(update_custom_field_input_object, id, opts = {})
      data, _status_code, _headers = update_custom_field_with_http_info(update_custom_field_input_object, id, opts)
      data
    end

    # Update existing custom field.
    # @param update_custom_field_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def update_custom_field_with_http_info(update_custom_field_input_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_custom_field ...'
      end
      # verify the required parameter 'update_custom_field_input_object' is set
      if @api_client.config.client_side_validation && update_custom_field_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_custom_field_input_object' when calling TextMagicApi.update_custom_field"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.update_custom_field"
      end
      # resource path
      local_var_path = '/api/v2/customfields/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_custom_field_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update contact's custom field value.
    # @param update_custom_field_value_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def update_custom_field_value(update_custom_field_value_input_object, id, opts = {})
      data, _status_code, _headers = update_custom_field_value_with_http_info(update_custom_field_value_input_object, id, opts)
      data
    end

    # Update contact&#39;s custom field value.
    # @param update_custom_field_value_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def update_custom_field_value_with_http_info(update_custom_field_value_input_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_custom_field_value ...'
      end
      # verify the required parameter 'update_custom_field_value_input_object' is set
      if @api_client.config.client_side_validation && update_custom_field_value_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_custom_field_value_input_object' when calling TextMagicApi.update_custom_field_value"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.update_custom_field_value"
      end
      # resource path
      local_var_path = '/api/v2/customfields/{id}/update'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_custom_field_value_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_custom_field_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update inbound messages notification settings
    # @param update_inbound_messages_notification_settings_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def update_inbound_messages_notification_settings(update_inbound_messages_notification_settings_input_object, opts = {})
      update_inbound_messages_notification_settings_with_http_info(update_inbound_messages_notification_settings_input_object, opts)
      nil
    end

    # Update inbound messages notification settings
    # @param update_inbound_messages_notification_settings_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_inbound_messages_notification_settings_with_http_info(update_inbound_messages_notification_settings_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_inbound_messages_notification_settings ...'
      end
      # verify the required parameter 'update_inbound_messages_notification_settings_input_object' is set
      if @api_client.config.client_side_validation && update_inbound_messages_notification_settings_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_inbound_messages_notification_settings_input_object' when calling TextMagicApi.update_inbound_messages_notification_settings"
      end
      # resource path
      local_var_path = '/api/v2/user/notification/inbound'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_inbound_messages_notification_settings_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_inbound_messages_notification_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update existing list.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateListObject] :update_list_object 
    # @return [ResourceLinkResponse]
    def update_list(id, opts = {})
      data, _status_code, _headers = update_list_with_http_info(id, opts)
      data
    end

    # Update existing list.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateListObject] :update_list_object 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def update_list_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_list ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.update_list"
      end
      # resource path
      local_var_path = '/api/v2/lists/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'update_list_object'])
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change user password.
    # @param update_password_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def update_password(update_password_input_object, opts = {})
      update_password_with_http_info(update_password_input_object, opts)
      nil
    end

    # Change user password.
    # @param update_password_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_password_with_http_info(update_password_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_password ...'
      end
      # verify the required parameter 'update_password_input_object' is set
      if @api_client.config.client_side_validation && update_password_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_password_input_object' when calling TextMagicApi.update_password"
      end
      # resource path
      local_var_path = '/api/v2/user/password/change'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_password_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change sender settings for specified country.
    # @param update_sender_setting_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [nil]
    def update_sender_setting(update_sender_setting_input_object, opts = {})
      update_sender_setting_with_http_info(update_sender_setting_input_object, opts)
      nil
    end

    # Change sender settings for specified country.
    # @param update_sender_setting_input_object 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_sender_setting_with_http_info(update_sender_setting_input_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_sender_setting ...'
      end
      # verify the required parameter 'update_sender_setting_input_object' is set
      if @api_client.config.client_side_validation && update_sender_setting_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_sender_setting_input_object' when calling TextMagicApi.update_sender_setting"
      end
      # resource path
      local_var_path = '/api/v2/sender/settings'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_sender_setting_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_sender_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update existing survey.
    # @param update_survey_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def update_survey(update_survey_input_object, id, opts = {})
      data, _status_code, _headers = update_survey_with_http_info(update_survey_input_object, id, opts)
      data
    end

    # Update existing survey.
    # @param update_survey_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def update_survey_with_http_info(update_survey_input_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_survey ...'
      end
      # verify the required parameter 'update_survey_input_object' is set
      if @api_client.config.client_side_validation && update_survey_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_survey_input_object' when calling TextMagicApi.update_survey"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.update_survey"
      end
      # resource path
      local_var_path = '/api/v2/surveys/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_survey_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update existing node.
    # @param update_survey_node_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def update_survey_node(update_survey_node_input_object, id, opts = {})
      data, _status_code, _headers = update_survey_node_with_http_info(update_survey_node_input_object, id, opts)
      data
    end

    # Update existing node.
    # @param update_survey_node_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def update_survey_node_with_http_info(update_survey_node_input_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_survey_node ...'
      end
      # verify the required parameter 'update_survey_node_input_object' is set
      if @api_client.config.client_side_validation && update_survey_node_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_survey_node_input_object' when calling TextMagicApi.update_survey_node"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.update_survey_node"
      end
      # resource path
      local_var_path = '/api/v2/surveys/nodes/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_survey_node_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_survey_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update existing template.
    # @param update_template_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values  (default to true)
    # @return [ResourceLinkResponse]
    def update_template(update_template_input_object, id, opts = {})
      data, _status_code, _headers = update_template_with_http_info(update_template_input_object, id, opts)
      data
    end

    # Update existing template.
    # @param update_template_input_object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :x_ignore_null_values 
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def update_template_with_http_info(update_template_input_object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.update_template ...'
      end
      # verify the required parameter 'update_template_input_object' is set
      if @api_client.config.client_side_validation && update_template_input_object.nil?
        fail ArgumentError, "Missing the required parameter 'update_template_input_object' when calling TextMagicApi.update_template"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.update_template"
      end
      # resource path
      local_var_path = '/api/v2/templates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Ignore-Null-Values'] = opts[:'x_ignore_null_values'] if !opts[:'x_ignore_null_values'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_template_input_object)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#update_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add an avatar for the current user.
    # @param image User avatar. Should be PNG or JPG file not more than 10 MB
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upload_avatar(image, opts = {})
      upload_avatar_with_http_info(image, opts)
      nil
    end

    # Add an avatar for the current user.
    # @param image User avatar. Should be PNG or JPG file not more than 10 MB
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_avatar_with_http_info(image, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.upload_avatar ...'
      end
      # verify the required parameter 'image' is set
      if @api_client.config.client_side_validation && image.nil?
        fail ArgumentError, "Missing the required parameter 'image' when calling TextMagicApi.upload_avatar"
      end
      # resource path
      local_var_path = '/api/v2/user/avatar'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['image'] = image

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#upload_avatar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add an avatar for the contact.
    # @param image Contact avatar. Should be PNG or JPG file not more than 10 MB
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [ResourceLinkResponse]
    def upload_contact_avatar(image, id, opts = {})
      data, _status_code, _headers = upload_contact_avatar_with_http_info(image, id, opts)
      data
    end

    # Add an avatar for the contact.
    # @param image Contact avatar. Should be PNG or JPG file not more than 10 MB
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def upload_contact_avatar_with_http_info(image, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.upload_contact_avatar ...'
      end
      # verify the required parameter 'image' is set
      if @api_client.config.client_side_validation && image.nil?
        fail ArgumentError, "Missing the required parameter 'image' when calling TextMagicApi.upload_contact_avatar"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.upload_contact_avatar"
      end
      # resource path
      local_var_path = '/api/v2/contacts/{id}/avatar'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['image'] = image

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#upload_contact_avatar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add an avatar for the list.
    # @param image List avatar. Should be PNG or JPG file not more than 10 MB
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [ResourceLinkResponse]
    def upload_list_avatar(image, id, opts = {})
      data, _status_code, _headers = upload_list_avatar_with_http_info(image, id, opts)
      data
    end

    # Add an avatar for the list.
    # @param image List avatar. Should be PNG or JPG file not more than 10 MB
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceLinkResponse, Fixnum, Hash)>] ResourceLinkResponse data, response status code and response headers
    def upload_list_avatar_with_http_info(image, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.upload_list_avatar ...'
      end
      # verify the required parameter 'image' is set
      if @api_client.config.client_side_validation && image.nil?
        fail ArgumentError, "Missing the required parameter 'image' when calling TextMagicApi.upload_list_avatar"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TextMagicApi.upload_list_avatar"
      end
      # resource path
      local_var_path = '/api/v2/lists/{id}/avatar'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['image'] = image

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#upload_list_avatar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload message attachment
    # Upload a new file to insert it as a link.
    # @param file Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats
    # @param [Hash] opts the optional parameters
    # @return [UploadMessageAttachmentResponse]
    def upload_message_attachment(file, opts = {})
      data, _status_code, _headers = upload_message_attachment_with_http_info(file, opts)
      data
    end

    # Upload message attachment
    # Upload a new file to insert it as a link.
    # @param file Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadMessageAttachmentResponse, Fixnum, Hash)>] UploadMessageAttachmentResponse data, response status code and response headers
    def upload_message_attachment_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextMagicApi.upload_message_attachment ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling TextMagicApi.upload_message_attachment"
      end
      # resource path
      local_var_path = '/api/v2/messages/attachment'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadMessageAttachmentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextMagicApi#upload_message_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
