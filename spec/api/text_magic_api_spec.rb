=begin
#TextMagic API Documentation

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2
Contact: support@textmagi.biz
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'spec_helper'
require 'json'

# Unit tests for TextMagic::TextMagicApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TextMagicApi' do
  before do
    # run before each test
    @instance = TextMagic::TextMagicApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TextMagicApi' do
    it 'should create an instance of TextMagicApi' do
      expect(@instance).to be_instance_of(TextMagic::TextMagicApi)
    end
  end

  # unit tests for assign_contacts_to_list
  # Assign contacts to the specified list.
  # @param assign_contacts_to_list_input_object Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'assign_contacts_to_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for block_contact
  # Block contact from inbound and outbound communication by phone number.
  # @param block_contact_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'block_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for buy_dedicated_number
  # Buy a dedicated number and assign it to the specified account.
  # @param buy_dedicated_number_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'buy_dedicated_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cancel_survey
  # Cancel a survey.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'cancel_survey test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_phone_verification_code
  # Check user phone verification code
  # @param check_phone_verification_code_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'check_phone_verification_code test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clear_and_assign_contacts_to_list
  # Reset list members to the specified contacts.
  # @param clear_and_assign_contacts_to_list_input_object Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'clear_and_assign_contacts_to_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for close_chats_bulk
  # Close chats by chat ids or close all chats
  # @param close_chats_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'close_chats_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for close_read_chats
  # Close all chats that have no unread messages.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'close_read_chats test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for close_subaccount
  # Close subaccount.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'close_subaccount test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_contact
  # Create a new contact from the submitted data.
  # @param create_contact_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'create_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_contact_note
  # Create a new contact note.
  # @param create_contact_note_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'create_contact_note test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_custom_field
  # Create a new custom field from the submitted data.
  # @param create_custom_field_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'create_custom_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_list
  # Create a new list from the submitted data.
  # @param create_list_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'create_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_push_token
  # Add or update a device token.
  # @param create_push_token_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'create_push_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_survey
  # Create a new survey from the submitted data.
  # @param create_survey_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'create_survey test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_survey_node
  # Create a new node from the submitted data.
  # @param create_survey_node_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'create_survey_node test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_template
  # Create a new template from the submitted data.
  # @param create_template_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'create_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_all_contacts
  # Delete all contacts.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_all_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_all_outbound_messages
  # Delete all messages
  # Delete all messages.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_all_outbound_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_avatar
  # Delete an avatar for the current user.\\
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_avatar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_chat_messages
  # Delete messages from chat by given messages ID(s).
  # @param delete_chat_messages_bulk_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'delete_chat_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_chats_bulk
  # Delete chats by given ID(s) or delete all chats.
  # @param delete_chats_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'delete_chats_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contact
  # Delete a single contact.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contact_avatar
  # Delete an avatar for the contact.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_contact_avatar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contact_note
  # Delete a single contact note.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_contact_note test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contact_notes_bulk
  # Delete contact note by given ID(s) or delete all contact notes.
  # @param id 
  # @param delete_contact_notes_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'delete_contact_notes_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contacts_by_ids
  # Delete contact by given ID(s) or delete all contacts.
  # @param delete_contacts_by_ids_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'delete_contacts_by_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contacts_from_list
  # Unassign contacts from the specified list.
  # @param delete_contacs_from_list_object Contact ID(s), separated by comma
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_contacts_from_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_custom_field
  # Delete a single custom field.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_custom_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_dedicated_number
  # Cancel dedicated number subscription.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_dedicated_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_inbound_message
  # Delete the incoming message.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_inbound_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_inbound_messages_bulk
  # Delete inbound messages by given ID(s) or delete all inbound messages.
  # @param delete_inbound_messages_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'delete_inbound_messages_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_list
  # Delete a single list.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_list_avatar
  # Delete an avatar for the list.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_list_avatar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_list_contacts_bulk
  # Delete contact from list by given ID(s) or all contacts from list.
  # @param delete_list_contacts_bulk_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'delete_list_contacts_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_lists_bulk
  # Delete list by given ID(s) or delete all lists.
  # @param delete_lists_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'delete_lists_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_message_session
  # Delete a message session, together with all nested messages.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_message_session test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_message_sessions_bulk
  # Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
  # @param delete_message_sessions_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'delete_message_sessions_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_outbound_message
  # Delete message
  # Delete a single message.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_outbound_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_outbound_messages_bulk
  # Delete messages by IDs
  # Delete outbound messages by given ID(s) or delete all outbound messages.
  # @param delete_outbound_messages_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'delete_outbound_messages_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_push_token
  # Delete a push notification device token.
  # @param type 
  # @param device_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_push_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_scheduled_message
  # Delete a message session, together with all nested messages.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_scheduled_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_scheduled_messages_bulk
  # Delete scheduled messages by given ID(s) or delete all scheduled messages.
  # @param delete_scheduled_messages_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'delete_scheduled_messages_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_sender_id
  # Delete a Sender ID.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_sender_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_survey
  # Delete a survey.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_survey test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_survey_node
  # Delete a node.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_survey_node test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_template
  # Delete a single template.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_templates_bulk
  # Delete template by given ID(s) or delete all templates.
  # @param delete_templates_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'delete_templates_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for do_auth
  # Authenticate user by given username and password.
  # Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
  # @param do_auth_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [DoAuthResponse]
  describe 'do_auth test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for do_carrier_lookup
  # Carrier Lookup
  # @param phone 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :country Country code for local formatted numbers
  # @return [DoCarrierLookupResponse]
  describe 'do_carrier_lookup test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for do_email_lookup
  # Validate Email address using Email Lookup tool
  # @param email 
  # @param [Hash] opts the optional parameters
  # @return [DoEmailLookupResponse]
  describe 'do_email_lookup test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for duplicate_survey
  # Duplicate a survey.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'duplicate_survey test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_bulk_sessions
  # Get all bulk sending sessions.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @return [GetAllBulkSessionsResponse]
  describe 'get_all_bulk_sessions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_chats
  # Get all user chats.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :status Fetch only (a)ctive, (c)losed or (d)eleted chats
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :order_by Order results by some field. Default is id
  # @option opts [Integer] :voice Fetch results with voice calls
  # @option opts [Integer] :flat Should additional contact info be included
  # @return [GetAllChatsResponse]
  describe 'get_all_chats test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_inbound_messages
  # Get all inbox messages.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :order_by Order results by some field. Default is id
  # @option opts [String] :direction Order direction. Default is desc
  # @return [GetAllInboundMessagesResponse]
  describe 'get_all_inbound_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_message_sessions
  # Get all message sending sessions.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @return [GetAllMessageSessionsResponse]
  describe 'get_all_message_sessions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_outbound_messages
  # Get all messages
  # Get all user oubound messages.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [Integer] :last_id Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified
  # @return [GetAllOutboundMessagesResponse]
  describe 'get_all_outbound_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_scheduled_messages
  # Get all scheduled messages.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :status Fetch schedules with the specific status: a - actual, c - completed, x - all
  # @option opts [String] :order_by Order results by some field. Default is id
  # @option opts [String] :direction Order direction. Default is desc
  # @return [GetAllScheduledMessagesResponse]
  describe 'get_all_scheduled_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_templates
  # Get all user templates.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @return [GetAllTemplatesResponse]
  describe 'get_all_templates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_available_dedicated_numbers
  # Find available dedicated numbers to buy.
  # @param country Dedicated number country. Two letters in upper case
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :prefix Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore.
  # @option opts [Integer] :tollfree Should we show only tollfree numbers (tollfree available only for US). Default is false.
  # @return [GetAvailableDedicatedNumbersResponse]
  describe 'get_available_dedicated_numbers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_available_sender_setting_options
  # Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :country Return sender setting options available in specific country only. Two upper case characters
  # @return [GetAvailableSenderSettingOptionsResponse]
  describe 'get_available_sender_setting_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_balance_notification_options
  # Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
  # @param [Hash] opts the optional parameters
  # @return [GetBalanceNotificationOptionsResponse]
  describe 'get_balance_notification_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_balance_notification_settings
  # Get balance notification settings
  # @param [Hash] opts the optional parameters
  # @return [GetBalanceNotificationSettingsResponse]
  describe 'get_balance_notification_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_blocked_contacts
  # Get blocked contacts.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :query Find blocked contacts by specified search query
  # @option opts [String] :order_by Order results by some field. Default is id
  # @option opts [String] :direction Order direction. Default is desc
  # @return [GetBlockedContactsResponse]
  describe 'get_blocked_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bulk_session
  # Get bulk message session status.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [BulkSession]
  describe 'get_bulk_session test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_callback_settings
  # Fetch callback URL settings
  # @param [Hash] opts the optional parameters
  # @return [GetCallbackSettingsResponse]
  describe 'get_callback_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_calls_prices
  # Check pricing for a inbound/outbound call.
  # @param [Hash] opts the optional parameters
  # @return [Hash<String, Object>]
  describe 'get_calls_prices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_chat
  # Get a single chat.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [Chat]
  describe 'get_chat test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_chat_by_phone
  # Find chats by phone.
  # @param phone 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :upsert Create a new chat if not found
  # @option opts [Integer] :reopen Reopen chat if found or do not change status
  # @return [Chat]
  describe 'get_chat_by_phone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_chat_messages
  # Fetch messages from chat with specified chat id.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :query Find messages by specified search query
  # @option opts [Integer] :start Return messages since specified timestamp only
  # @option opts [Integer] :_end Return messages up to specified timestamp only
  # @option opts [String] :direction Order direction. Default is desc
  # @option opts [Integer] :voice Fetch results with voice calls
  # @return [GetChatMessagesResponse]
  describe 'get_chat_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact
  # Get a single contact.
  # @param id The contact id
  # @param [Hash] opts the optional parameters
  # @return [Contact]
  describe 'get_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_by_phone
  # Get a single contact by phone number.
  # @param phone 
  # @param [Hash] opts the optional parameters
  # @return [Contact]
  describe 'get_contact_by_phone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_if_blocked
  # Check is that phone number blocked
  # @param phone Phone number to check
  # @param [Hash] opts the optional parameters
  # @return [Contact]
  describe 'get_contact_if_blocked test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_import_session_progress
  # Get contact import session progress.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [GetContactImportSessionProgressResponse]
  describe 'get_contact_import_session_progress test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_note
  # Get a single contact note.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ContactNote]
  describe 'get_contact_note test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_notes
  # Fetch notes assigned to the given contact.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @return [GetContactNotesResponse]
  describe 'get_contact_notes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contacts
  # Get all user contacts.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [Integer] :shared Should shared contacts to be included
  # @option opts [String] :order_by Order results by some field. Default is id
  # @option opts [String] :direction Order direction. Default is desc
  # @return [GetContactsResponse]
  describe 'get_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contacts_autocomplete
  # Get contacts autocomplete suggestions by given search term.
  # @param query Find recipients by specified search query
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit How many results to return
  # @option opts [Integer] :lists Should lists be returned or not
  # @return [Array<GetContactsAutocompleteResponse>]
  describe 'get_contacts_autocomplete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contacts_by_list_id
  # Fetch user contacts by given group id.
  # A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
  # @param id Given group Id.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :order_by Order results by some field. Default is id
  # @option opts [String] :direction Order direction. Default is desc
  # @return [GetContactsByListIdResponse]
  describe 'get_contacts_by_list_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_countries
  # Return list of countries.
  # @param [Hash] opts the optional parameters
  # @return [Array<Country>]
  describe 'get_countries test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_current_user
  # Get current user info.
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'get_current_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_custom_field
  # Get a single custom field.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [UserCustomField]
  describe 'get_custom_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_custom_fields
  # Get all contact custom fields.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @return [GetCustomFieldsResponse]
  describe 'get_custom_fields test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_dedicated_number
  # Get a single dedicated number.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [UsersInbound]
  describe 'get_dedicated_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_disallowed_rules
  # Get an array of all rules that are disallowed to the current account.
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'get_disallowed_rules test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_favourites
  # Get favorite contacts and lists.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :query Find contacts or lists by specified search query
  # @return [GetFavouritesResponse]
  describe 'get_favourites test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_forwarded_calls
  # Get all forwarded calls.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @return [GetForwardedCallsResponse]
  describe 'get_forwarded_calls test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_inbound_message
  # Get a single inbox message.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [MessageIn]
  describe 'get_inbound_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_inbound_messages_notification_settings
  # Get inbound messages notification settings
  # @param [Hash] opts the optional parameters
  # @return [GetInboundMessagesNotificationSettingsResponse]
  describe 'get_inbound_messages_notification_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoices
  # Return account invoices.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @return [GetInvoicesResponse]
  describe 'get_invoices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_list
  # Get a single list.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'get_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_list_contacts_ids
  # Fetch all contacts IDs belonging to the list with ID.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [GetListContactsIdsResponse]
  describe 'get_list_contacts_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_lists_of_contact
  # Return lists which contact belongs to.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @return [GetListsOfContactResponse]
  describe 'get_lists_of_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_message_preview
  # Preview message
  # Get messages preview (with tags merged) up to 100 messages per session.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :text Message text. Required if template_id is not set
  # @option opts [Integer] :template_id Template used instead of message text. Required if text is not set
  # @option opts [Integer] :sending_time DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now
  # @option opts [String] :sending_date_time Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone
  # @option opts [String] :sending_timezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone
  # @option opts [String] :contacts Comma separated array of contact resources id message will be sent to
  # @option opts [String] :lists Comma separated array of list resources id message will be sent to
  # @option opts [String] :phones Comma separated array of E.164 phone numbers message will be sent to
  # @option opts [Integer] :cut_extra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0
  # @option opts [Integer] :parts_count Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6
  # @option opts [Integer] :reference_id Custom message reference id which can be used in your application infrastructure
  # @option opts [String] :from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery
  # @option opts [String] :rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details
  # @option opts [Integer] :create_chat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0
  # @option opts [Integer] :tts Send Text to Speech message. Default is 0
  # @option opts [Integer] :local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0
  # @option opts [String] :local_country 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country
  # @return [GetMessagePreviewResponse]
  describe 'get_message_preview test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_message_price
  # Check price
  # Check pricing for a new outbound message.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :include_blocked Should we show pricing for the blocked contacts.
  # @option opts [String] :text Message text. Required if template_id is not set
  # @option opts [Integer] :template_id Template used instead of message text. Required if text is not set
  # @option opts [Integer] :sending_time DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now
  # @option opts [String] :sending_date_time Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone
  # @option opts [String] :sending_timezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone
  # @option opts [String] :contacts Comma separated array of contact resources id message will be sent to
  # @option opts [String] :lists Comma separated array of list resources id message will be sent to
  # @option opts [String] :phones Comma separated array of E.164 phone numbers message will be sent to
  # @option opts [Integer] :cut_extra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0
  # @option opts [Integer] :parts_count Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6
  # @option opts [Integer] :reference_id Custom message reference id which can be used in your application infrastructure
  # @option opts [String] :from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery
  # @option opts [String] :rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details
  # @option opts [Integer] :create_chat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0
  # @option opts [Integer] :tts Send Text to Speech message. Default is 0
  # @option opts [Integer] :local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0
  # @option opts [String] :local_country 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country
  # @return [GetMessagePriceResponse]
  describe 'get_message_price test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_message_prices
  # Get pricing
  # Get message prices for all countries.
  # @param [Hash] opts the optional parameters
  # @return [GetMessagePricesResponse]
  describe 'get_message_prices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_message_session
  # Get a message session.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [MessageSession]
  describe 'get_message_session test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_message_session_stat
  # Get sending session statistics.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :include_deleted Search also in deleted messages
  # @return [GetMessageSessionStatResponse]
  describe 'get_message_session_stat test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_messages_by_session_id
  # Fetch messages by given session id.
  # A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :statuses Find messages by status
  # @option opts [Integer] :include_deleted Search also in deleted messages
  # @return [GetMessagesBySessionIdResponse]
  describe 'get_messages_by_session_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_messaging_counters
  # Return counters for messaging data views.
  # @param [Hash] opts the optional parameters
  # @return [GetMessagingCountersResponse]
  describe 'get_messaging_counters test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_messaging_stat
  # Return messaging statistics.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :by Group results by specified period: off, day, month or year. Default is off
  # @option opts [Integer] :start Start date in unix timestamp format. Default is 7 days ago
  # @option opts [String] :_end End date in unix timestamp format. Default is now
  # @return [GetMessagingStatResponse]
  describe 'get_messaging_stat test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_outbound_message
  # Get a single message
  # Get a single outgoing message.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [MessageOut]
  describe 'get_outbound_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_outbound_messages_history
  # Get history
  # Get outbound messages history.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit How many results to return
  # @option opts [Integer] :last_id Filter results by ID, selecting all values lesser than the specified ID.
  # @option opts [String] :query Find message by specified search query
  # @option opts [String] :order_by Order results by some field. Default is id
  # @option opts [String] :direction Order direction. Default is desc
  # @return [GetOutboundMessagesHistoryResponse]
  describe 'get_outbound_messages_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_push_tokens
  # Get all device tokens assigned to the current account
  # @param [Hash] opts the optional parameters
  # @return [GetPushTokensResponse]
  describe 'get_push_tokens test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_scheduled_message
  # Get message schedule.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [MessagesIcs]
  describe 'get_scheduled_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sender_id
  # Get a single Sender ID.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [SenderId]
  describe 'get_sender_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sender_ids
  # Get all sender IDs of current user.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @return [GetSenderIdsResponse]
  describe 'get_sender_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sender_settings
  # Get current user sender settings.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :country Return sender settings enabled for sending to specified country. Two upper case characters
  # @return [GetSenderSettingsResponse]
  describe 'get_sender_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_spending_stat
  # Return account spending statistics.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [Integer] :start Optional. Start date in unix timestamp format. Default is 7 days ago
  # @option opts [Integer] :_end Optional. End date in unix timestamp format. Default is now
  # @return [GetSpendingStatResponse]
  describe 'get_spending_stat test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_state
  # Get current entities state
  # @param [Hash] opts the optional parameters
  # @return [GetStateResponse]
  describe 'get_state test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subaccount
  # Get a single subaccount.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'get_subaccount test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subaccounts
  # Get all subaccounts of current user.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @return [User]
  describe 'get_subaccounts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subaccounts_with_tokens
  # Get all subaccounts with their REST API tokens associated with specified app name.
  # When more than one token related to app name, last key will be returned.
  # @param get_subaccounts_with_tokens_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [GetSubaccountsWithTokensResponse]
  describe 'get_subaccounts_with_tokens test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_survey
  # Get a survey by id.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [Survey]
  describe 'get_survey test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_survey_node
  # Get a node by id.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [SurveyNode]
  describe 'get_survey_node test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_survey_nodes
  # Fetch nodes by given survey id.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [GetSurveyNodesResponse]
  describe 'get_survey_nodes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_surveys
  # Get all user surveys.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @return [GetSurveysResponse]
  describe 'get_surveys test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_template
  # Get a single template.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [MessageTemplate]
  describe 'get_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_timezones
  # Return all available timezone IDs.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :full Return full info about timezones in array (0 or 1). Default is 0
  # @return [Object]
  describe 'get_timezones test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_unread_messages_total
  # Get total amount of unread messages in the current user chats.
  # @param [Hash] opts the optional parameters
  # @return [GetUnreadMessagesTotalResponse]
  describe 'get_unread_messages_total test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_unsubscribed_contact
  # Get a single unsubscribed contact.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [UnsubscribedContact]
  describe 'get_unsubscribed_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_unsubscribers
  # Get all contact have unsubscribed from your communication.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @return [GetUnsubscribersResponse]
  describe 'get_unsubscribers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_dedicated_numbers
  # Get user&#39;s dedicated numbers.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [Integer] :survey_id Fetch only that numbers which are ready for the survey
  # @return [GetUserDedicatedNumbersResponse]
  describe 'get_user_dedicated_numbers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_lists
  # Get all user lists.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :order_by Order results by some field. Default is id
  # @option opts [String] :direction Order direction. Default is desc
  # @option opts [Integer] :favorite_only Return only favorite lists
  # @option opts [Integer] :only_mine Return only current user lists
  # @return [GetUserListsResponse]
  describe 'get_user_lists test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_versions
  # Get minimal valid apps versions
  # @param [Hash] opts the optional parameters
  # @return [GetVersionsResponse]
  describe 'get_versions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for invite_subaccount
  # Invite new subaccount.
  # @param invite_subaccount_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'invite_subaccount test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mark_chats_read_bulk
  # Mark several chats as read by chat ids or mark all chats as read
  # @param mark_chats_read_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'mark_chats_read_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mark_chats_unread_bulk
  # Mark several chats as UNread by chat ids or mark all chats as UNread
  # @param mark_chats_unread_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'mark_chats_unread_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for merge_survey_nodes
  # Merge two question nodes.
  # @param merge_survey_nodes_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'merge_survey_nodes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mute_chat
  # Set mute mode.
  # @param mute_chat_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'mute_chat test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mute_chats_bulk
  # Mute several chats by chat ids or mute all chats
  # @param mute_chats_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'mute_chats_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ping
  # Just does a pong.
  # @param [Hash] opts the optional parameters
  # @return [PingResponse]
  describe 'ping test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reopen_chats_bulk
  # Reopen chats by chat ids or reopen all chats
  # @param reopen_chats_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'reopen_chats_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for request_new_subaccount_token
  # Request a new REST API token for subaccount.
  # Returning user object, key and app name.
  # @param request_new_subaccount_token_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [User]
  describe 'request_new_subaccount_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for request_sender_id
  # Request for a new Sender ID.
  # @param request_sender_id_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'request_sender_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reset_survey
  # Reset a survey flow.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'reset_survey test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_chats
  # Find chats by inbound or outbound messages text.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :query Find chats by specified search query
  # @return [SearchChatsResponse]
  describe 'search_chats test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_chats_by_ids
  # Find chats by IDs.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :ids Find chats by ID(s)
  # @return [SearchChatsByIdsResponse]
  describe 'search_chats_by_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_chats_by_receipent
  # Find chats by recipient (contact, list name or phone number).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :query Find chats by specified search query
  # @option opts [String] :order_by Order results by some field. Default is id
  # @return [SearchChatsByReceipentResponse]
  describe 'search_chats_by_receipent test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_contacts
  # Find user contacts by given parameters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [Integer] :shared Should shared contacts to be included
  # @option opts [String] :ids Find contact by ID(s)
  # @option opts [Integer] :list_id Find contact by List ID
  # @option opts [Integer] :include_blocked Should blocked contacts to be included
  # @option opts [String] :query Find contacts by specified search query
  # @option opts [Integer] :local Treat phone number passed in &#39;query&#39; field as local. Default is 0
  # @option opts [String] :country 2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country
  # @option opts [String] :order_by Order results by some field. Default is id
  # @option opts [String] :direction Order direction. Default is desc
  # @return [SearchContactsResponse]
  describe 'search_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_inbound_messages
  # Find inbound messages by given parameters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :ids Find message by ID(s)
  # @option opts [String] :query Find recipients by specified search query
  # @option opts [String] :order_by Order results by some field. Default is id
  # @option opts [String] :direction Order direction. Default is desc
  # @option opts [Integer] :expand Expand by adding firstName, lastName and contactId
  # @return [SearchInboundMessagesResponse]
  describe 'search_inbound_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_lists
  # Find contact lists by given parameters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :ids Find lists by ID(s)
  # @option opts [String] :query Find lists by specified search query
  # @option opts [Integer] :only_mine Return only current user lists
  # @option opts [Integer] :only_default Return only default lists
  # @option opts [String] :order_by Order results by some field. Default is id
  # @option opts [String] :direction Order direction. Default is desc
  # @return [SearchListsResponse]
  describe 'search_lists test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_outbound_messages
  # Find messages
  # Find outbound messages by given parameters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [Integer] :last_id Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified
  # @option opts [String] :ids Find message by ID(s)
  # @option opts [Integer] :session_id Find messages by session ID
  # @option opts [String] :statuses Find messages by status
  # @option opts [Integer] :include_deleted Search also in deleted messages
  # @option opts [String] :query Find messages by specified search query
  # @return [SearchOutboundMessagesResponse]
  describe 'search_outbound_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_scheduled_messages
  # Find scheduled messages by given parameters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :query Find messages by specified search query
  # @option opts [String] :ids Find schedules by ID(s)
  # @option opts [String] :status Fetch schedules with the specific status: a - actual, c - completed, x - all
  # @option opts [String] :order_by Order results by some field. Default is id
  # @option opts [String] :direction Order direction. Default is desc
  # @return [SearchScheduledMessagesResponse]
  describe 'search_scheduled_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_templates
  # Find user templates by given parameters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page
  # @option opts [Integer] :limit How many results to return
  # @option opts [String] :ids Find template by ID(s)
  # @option opts [String] :name Find template by name
  # @option opts [String] :content Find template by content
  # @return [SearchTemplatesResponse]
  describe 'search_templates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_email_verification_code
  # Send user email verification
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'send_email_verification_code test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_message
  # Send message
  # The main entrypoint to send messages. See examples above for the reference.
  # @param send_message_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [SendMessageResponse]
  describe 'send_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_phone_verification_code
  # Send user phone verification
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'send_phone_verification_code test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_chat_status
  # Set status of the chat given by ID.
  # @param set_chat_status_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'set_chat_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for start_survey
  # Start a survey.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'start_survey test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unblock_contact
  # Unblock contact by phone number.
  # @param unblock_contact_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'unblock_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unblock_contacts_bulk
  # Unblock several contacts by blocked contact ids or unblock all contacts
  # @param unblock_contacts_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'unblock_contacts_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unmute_chats_bulk
  # Unmute several chats by chat ids or unmute all chats
  # @param unmute_chats_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'unmute_chats_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unsubscribe_contact
  # Unsubscribe contact from your communication by phone number.
  # @param unsubscribe_contact_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'unsubscribe_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_balance_notification_settings
  # Update balance notification settings
  # @param update_balance_notification_settings_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'update_balance_notification_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_callback_settings
  # Update callback URL settings
  # @param update_callback_settings_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'update_callback_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_chat_desktop_notification_settings
  # Update chat desktop notification settings
  # @param update_chat_desktop_notification_settings_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'update_chat_desktop_notification_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_contact
  # Update existing contact.
  # @param update_contact_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'update_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_contact_note
  # Update existing contact note.
  # @param update_contact_note_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'update_contact_note test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_current_user
  # Update current user info.
  # @param update_current_user_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [UpdateCurrentUserResponse]
  describe 'update_current_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_custom_field
  # Update existing custom field.
  # @param update_custom_field_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'update_custom_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_custom_field_value
  # Update contact&#39;s custom field value.
  # @param update_custom_field_value_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'update_custom_field_value test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_inbound_messages_notification_settings
  # Update inbound messages notification settings
  # @param update_inbound_messages_notification_settings_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'update_inbound_messages_notification_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_list
  # Update existing list.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateListObject] :update_list_object 
  # @return [ResourceLinkResponse]
  describe 'update_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_password
  # Change user password.
  # @param update_password_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'update_password test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_sender_setting
  # Change sender settings for specified country.
  # @param update_sender_setting_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [nil]
  describe 'update_sender_setting test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_survey
  # Update existing survey.
  # @param update_survey_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'update_survey test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_survey_node
  # Update existing node.
  # @param update_survey_node_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'update_survey_node test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_template
  # Update existing template.
  # @param update_template_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :x_ignore_null_values 
  # @return [ResourceLinkResponse]
  describe 'update_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_avatar
  # Add an avatar for the current user.
  # @param image User avatar. Should be PNG or JPG file not more than 10 MB
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'upload_avatar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_contact_avatar
  # Add an avatar for the contact.
  # @param image Contact avatar. Should be PNG or JPG file not more than 10 MB
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'upload_contact_avatar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_list_avatar
  # Add an avatar for the list.
  # @param image List avatar. Should be PNG or JPG file not more than 10 MB
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'upload_list_avatar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_message_attachment
  # Upload message attachment
  # Upload a new file to insert it as a link.
  # @param file Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats
  # @param [Hash] opts the optional parameters
  # @return [UploadMessageAttachmentResponse]
  describe 'upload_message_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
